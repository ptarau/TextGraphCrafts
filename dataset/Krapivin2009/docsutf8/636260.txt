--T
Computation of the simplest normal forms with perturbation parameters based on Lie transform and rescaling.
--A
Normal form theory is one of the most power tools for the study of nonlinear differential equations, in particular, for stability and bifurcation analysis. Recently, many researchers have paid attention to further reduction of conventional normal forms (CNF) to so called the simplest normal form (SNF). However, the computation of normal forms has been restricted to systems which do not contain perturbation parameters (unfolding). The computation of the SNF is more involved than that of CNFs, and the computation of the SNF with unfolding is even more complicated than the SNF without unfolding. Although some author mentioned further reduction of the SNF, no results have been reported on the exact computation of the SNF of systems with perturbation parameters. This paper presents an efficient method for computing the SNF of differential equations with perturbation parameters. Unlike CNF theory which uses an independent nonlinear transformation at each order, this approach uses a consistent nonlinear transformation through all order computations. The particular advantage of the method is able to provide an efficient recursive formula which can be used to obtain the nth-order equations containing the nth-order terms only. This greatly saves computational time and computer memory. The recursive formulations have been implemented on computer systems using Maple. As an illustrative example, the SNF for single zero singularity is considered using the new approach.
--B
Introduction
Normal form theory for dierential equations can be traced back to the original
work of one hundred years ago, and most credit should be given to Poincare
[1]. The theory plays an important role in the study of dierential equations
Preprint submitted to Elsevier Preprint 25 May 2001
related to complex behavior patterns such as bifurcation and instability [2{4].
The basic idea of normal form theory is employing successive, near-identity
nonlinear transformations to obtain a simple form. The simple form is qualitatively
equivalent to the original system in the vicinity of a xed point,
and thus greatly simplify the dynamical analysis. However, it has been found
that conventional normal forms (CNF) are not the simplest form which can
be obtained, and may be further simplied using a similar near-identity non-linear
transformation. (e.g., see [5{13]). Roughly speaking, CNF theory uses
the kth-order nonlinear transformation to possibly remove the kth-order non-linear
terms of the system, while in the computation of the simplest normal
form (SNF) the terms in the kth-order nonlinear transformation are not only
used to simplify the kth-order terms of the system, but also used to eliminate
higher order nonlinear terms. Since the computation for the SNF is
much more complicated than that of CNFs, computer algebra systems such
as Maple, Mathematics, Reduce, etc. have been used (e.g., see [12,14{18]).
Recently, researchers have paid particular attention to the development of efcient
computation methodology for computing the SNF [18].
The computation of normal forms has been restricted to systems which do not
contain perturbation parameters (unfolding). However, in general a physical
system or an engineering problem always involves some system parameters,
usually called perturbation parameter or unfolding. In practice, nding such
a normal form is more important and applicable. There are two ways for nd-
ing such a normal form. One way is to extend the dimension of a system by
including the dimension of the parameter and then apply normal form theory
to the extended system. The other way employs normal form theory directly
to the original system. The former may be convenient for proving theorems
while the later is more suitable for the computation of normal forms, which is
particularly useful when calculating an explicit normal form for a given sys-
tem. However, in most cases of computing such CNFs with unfolding, people
are usually interested in the normal form only. Thus one may rst ignore the
perturbation parameter and compute the normal form for the corresponding
\reduced" system (by setting the parameters zero), and then add unfolding
to the resulting normal form. In other words, the normal form of the original
system with parameters is equal to the normal form of the \reduced" system
plus the unfolding. This way it greatly reduces the computation eort, with
the cost that it does not provide the nonlinear transformation between the
original system and the normal form. This \simplied" approach is based on
the fact that the normal form terms (besides the unfolding) for the original
system (with perturbation parameters) are exactly same as that of the \re-
duced" system, implying that all higher order nonlinear terms consisting of
the parameters can be eliminated by nonlinear transformations.
The computation of the SNF is more involved than that of CNFs, and the
computation of the SNF with unfolding is even more complicated than the
SNF without unfolding. Although some authors mentioned further reduction
of the SNF, no results have been reported on the exact computation of the
SNF of systems with perturbation parameters. One might suggest that we
may follow the \simplied" way used for computing CNFs. That is, we rst
nd the SNF for the \reduced" system via a near-identity nonlinear transfor-
mation, and then add an unfolding to the SNF. However, it can be shown that
this \simplied" way is no longer applicable for computing the SNF of systems
with perturbation parameters. In other words, in general it's not possible to
use only near-identity transformations to remove all higher order terms which
involve the perturbation parameters. In this paper, we propose, in addition to
the near-identity transformation, to incorporate the rescaling on time to form
a systematic procedure. The particular advantage of the method is to provide
an ecient recursive formula which can be used to obtain the nth-order equations
containing the nth-order terms only. This greatly saves computational
time and computer memory. The recursive formulation can be easily implemented
using a computer algebra system such as Maple. Moreover, unlike CNF
theory which uses an independent nonlinear transformation at each order, this
approach uses a consistent nonlinear transformation through all order compu-
tations. This provides a one step transformation between the original system
and the nal SNF, without the need of combining the multiple step nonlinear
transformations at the end of computation.
In the next section, the ecient computation method is presented and the general
explicit recursive formula is derived. Section 3 applies the new approach
to derive the SNF for single zero singularity, and conclusions are drawn in
Section 4.
2 Computation of the SNF using Lie transform
Consider the general nonlinear dierential equation, described by
dx
dt
where x and  are the n-dimensional state variable and m-dimensional
parameter variable, respectively. It is assumed that is an equilibrium
of the system for any values of , i.e., f(0; )  0. Further, we assume that
the nonlinear function f(x; ) is analytic with respect to x and , and thus
we may expand equation (1) as
dx
dt
where Lx 4
represents the linear part and L is the Jacobian matrix,
Dxf , evaluated on the equilibrium at the critical point It is
assumed that all eigenvalues of L have zero real parts and, without loss of
generality, is given in Jordan canonical form. (Usually J is used to indicate
Jacobian matrix. Here we use L in order to be consistent with the Lie bracket
denotes the kth-degree vector homogeneous polynomials
of x and .
To show the basic idea of normal form theory, we rst discuss the case when
system (1) does not involve the perturbation parameter, , as normal forms
are formulated in most cases. In such a case f k (x; ) is reduced to f k (x).
The basic idea of normal form theory is to nd a near-identity nonlinear
transformation
such that the resulting system
dy
dt
becomes as simple as possible. Here h k (y) and g k (y) denote the kth-degree
vector homogeneous polynomials of y.
According to Takens' normal form theory [19], we may rst dene an operator
as follows:
denotes a linear vector space consisting of the kth-degree homogeneous
vector polynomials. The operator called Lie bracket, dened
by
Next, dene the space R k as the range of L k , and the complementary space
of R k as K
and we can then choose bases for R k and K k . Consequently, a vector homogeneous
polynomial f k (x) 2 H k can be split into two parts: one of them can
be spanned by the basis of R k and the other by that of K k . Normal form
theory shows that the part belonging to R k can be eliminated while the part
belonging to K k must be retained in the normal form.
It is easy to apply normal form theory to nd the \form" of the CNF given by
equation (4). In fact, the coecients of the nonlinear transformation h k (y)
being determined correspond to the terms belonging to space R k . The \form"
of the normal form g k (y) depends upon the basis of the complementary space
which is induced by the linear vector v 1 . We may apply the matrix method
[2] to nd the basis for space R k and then determine the basis of the complementary
space K k .
Since the main attention of this paper is focused on nding further reduction
of CNFs and computing the explicit expressions of the SNF and the nonlinear
transformation, we must nd the \form" of g k (y). Similar to nding CNFs,
the SNFs have been obtained using near-identity nonlinear transformations.
It should be mentioned that some author has also discussed the use of \rescal-
ing" to obtain a further reduction (e.g., see [14,15]). However, no results have
been reported on the study of the SNF of system (1). In this paper, we present
a method to explicitly compute the SNF of system (1). The key idea is still
same as that of CNFs: nding appropriate nonlinear transformations so that
the resulting normal form is the simplest. The simplest here means that the
terms retained in the SNF is the minimum up to any order.
The fundamental dierence between the CNF and the SNF is explained as fol-
lows: Finding the coecients of the nonlinear transformation and normal form
requires for solving a set of linear algebraic equations at each order. Since in
general the number of the coecients is larger than that of the algebraic equa-
tions, some coecients of the nonlinear transformation cannot be determined.
In CNF theory, the undetermined coecients are set zero and therefore the
nonlinear transformation is simplied. However, in order to further simplify
the normal form, one should not set the undetermined coecients zero but let
them carry over to higher order equations and hope that they can be used to
simplify higher order normal form terms. This is the key idea of the SNF com-
putation. It has been shown that computing the SNF of a \reduced" system
(without perturbation parameters) is much complicated than that for CNFs.
Therefore, it is expected that computing the SNF of system (1) is even more
involved than nding the SNF of the \reduced" system. Without a computer
algebra system, it is impossible to compute the SNF. Even with the aid of
symbolic computation, one may not be able to go too far if the computational
method is not ecient.
To start with, we extend the near-identity transformation (3) to include the
parameters, given by
and then add the rescaling on time:
Further we need to determine the \form" of the normal form of system (1).
In generic case, we may use the basis of K k (see equation (7)) to construct
k (y), which is assumed to be the same as that for the CNF of system (1),
plus the unfolding given in the general form, L 1 () y, so that equation (4)
becomes
dy
d
is an nn matrix linear function of , to be determined in the
process of computation, representing the unfolding of the system.
Now dierentiating equation (8) with respect to t and then applying equations
(2), and (8){(10) yields a set of algebraic equations at each order for
solving the coecients of the SNF and the nonlinear transformation. A further
reduction from a CNF to the SNF is to nd appropriate h k (y; )'s such
that some coecients of g k (y)'s can be eliminated.
When one applies normal form theory (e.g., Takens normal form theory) to
a system, one can easily nd the \form" of the normal form (i.e., the basis
of the complementary space K k ), but not the explicit expressions. However,
in practical applications, the solutions for the normal form and the nonlinear
transformation are both important and need to be found explicitly. To do this,
one may assume a general form of the nonlinear transformation and substitute
it back to the original dierential equation, with the aid of normal form theory,
to obtain the kth-order equations by balancing the coecients of the homogeneous
polynomial terms. These algebraic equations are then used to determine
the coecients of the normal form and the nonlinear transformation. Thus,
the key step in the computation of the kth-order normal form is to nd the
kth-order algebraic equations, which takes the most of the computation time
and computer memory. The solution procedures given in most of normal form
computation methods contain all lower order and many higher order terms in
the kth-order equations, which extremely increases the memory requirement
and the computation time. Therefore, from the computation point of view,
the crucial step is rst to derive the kth-order algebraic equations which only
contain the kth-order nonlinear terms.
The following theorem summarizes the results for the new recursive and computationally
ecient approach, which can be used to compute the kth-order
normal form and the associated nonlinear transformation.
Theorem 1: The recursive formula for computing the coecients of the simplest
normal form and the nonlinear transformation is give by
Tm
h l i
are all jth-degree vector homogeneous
polynomials in their arguments, and T j (y; ) is a scalar function of y and
. The variables y and  have been dropped for simplicity. The notation
h l i
denotes the ith order terms of the Taylor expansion of
y. More precisely,
where each dierential operator D aects only function f j , not h l m (i.e., h l m
is treated as a constant vector in the process of the dierentiation), and thus
j. Note that at each level of the dierentiation, the D operator is actually
a Frechet derivative to yield a matrix, which is multiplied with a vector to
generate another vector, and then to another level of Frechet derivative, and
so on.
Proof: First dierentiating equation (8) results in
dx
dt
dy
dt
dy
dt
dy
d
d
dt
then substituting equations (2), (9) and (10) into equation (13) yields
Note that the T 0 can be used for normalizing the leading non-zero nonlinear
coecient of the SNF. Since this normalization may change stability analysis if
time is reversed, we prefer to leave the leading non-zero coecient unchanged
and thus set T
Next substituting equation (8) into equation (14) and re-arranging gives
Then we use Taylor expansions of f near to rewrite equation (15) as
Further, applying equations (8) and (9) yields
representing the linear part of the system, and the Lie operator
with respect to y has been used. Note in equation (17) that the expansion
of f and h do not have the purely parameter terms since f(0;
for any values of . Finally comparing the same order terms in equation (17)
results in
. (18)
y, and the variables in g i
have been dropped for simplicity. For a general k, one can obtain the recursive
given in equation (11), and thus the proof is completed.
It has been observed from equations (11) and (18) that
(i) If system (1) does not have the parameter , then
thus equation (17) is reduced
which has been obtained in [18] for the \reduced" system. This indicates
that computing the SNF with unfolding needs much more computation
eort than that for computing the SNF without unfolding.
(ii) The only operation involved in the formula is the Frechet derivative, involved
in Dh i , D i f j and the Lie bracket [; ]. This operation can be
easily implemented using a computer algebra system.
(iii) The kth-order equation contains all the kth-order and only the kth-order
terms. The equation is given in a recursive form.
(iv) The kth-order equation depends upon the known vector homogeneous
polynomials
, and on the results for
obtained from
the lower order equations.
(v) The equation involves coecients of the nonlinear transformation h,
rescaling T and the coecients of the kth-order normal form g k . If
the jth-order (j < coecients of h j and T j are completely determined
from the jth-order equation, then the kth-order equation only
involves the unknown coecients of h k ; T k and g k , which yields a CNF.
(vi) If the kth-order equation contains lower order coecients of h
(j < which have not been determined in the lower order (<
tions, they may be used to eliminate more coecients of g k , and thus
the CNF can be further simplied.
(vii) In most of the approaches for computing the SNFs without unfolding
(e.g., see [7,8,11{17]), the nonlinear vector eld f is assumed to be in a
CNF for the purpose of simplifying symbolic computations. Since for such
an approach, the kth-order equations usually include all the lower order
terms as well as many higher order terms, it is extremely time consuming
for symbolic computation and takes too much computer memory. For the
approach proposed in this paper, the kth-order equation exactly only
contains the kth-order terms, which greatly saves computer memory and
computational time. This is particularly useful for computing the SNF
with unfolding. Therefore, for our approach, the vector eld f(x; ) can
be assumed as a general analytic function, not necessary a CNF form.
Now we can use equation (18) to explain the idea of SNF. Consider the rst
equation of (18) for L 2 and g 2
, we can split the right-hand side into two
parts: one contains y only while the other involves both y and . The part
containing only y can determine g 2 . That is, the part from f 2 that cannot
be eliminated by h 2 and T 1 is the solution for
. Similarly, the other part
containing both y and  can be used to nd the unfolding L 1 (). However,
it can be seen that some coecients of h 2 and T 1 are not used at this order.
Setting these \unnecessary" coecients zero results in the next equation of
in the same situation: it only requires to use h 3 and T 2 to remove
terms from f 3 as much as possible, since other terms h
been solved from the second order equations. This procedure can be continued
to any higher order equations. This is exactly CNF theory. However, when we
solve for g 2 and L 2 let the \unnecessary" coecients of h 2 and T 1 be carried
over to next step equation, then it is clear to see from the second equation
of (18) that four terms may contain these \unnecessary" coecients. These
\unnecessary" coecients can be used to possibly further eliminate a portion
or the whole part of f 3 which cannot be eliminated by the CNF approach. If
these \unnecessary" coecients are not used at this step, they can be carried
over further to higher order equations and may be used to remove some higher
order normal form terms.
3 The SNF for the single zero singularity
In this section, we shall apply the results and formulas obtained in the previous
section as well as the Maple program developed on the basis of recursive
formula (11) to compute the SNF of single zero singularity. We use this simple
example to demonstrate the solution procedure in nding the explicit SNF of
a general system. For the single zero singularity, the linear part, L x, becomes
zero, and we may put the general expanded system in a slightly dierent form
for convenience:
dx
dt
a 1i  i x +X
a 2i  i x 2 +X
a
Similarly, the near-identity nonlinear transformation and the time scaling are,
respectively, given by
and
with In order to have a comparison between system (20)
and its \reduced" system, given by (obtained by setting
(20)),
dx
dt
we list the SNF of the \reduced" system below, which were obtained only
using a near-identity transformation [17]:
(i) If a 20 6= 0, then the SNF is
dy
dt
(ii) If a then the SNF is
dy
dt
where the coecient b (2k 1)0 is given explicitly in terms of a j0 's.
This shows that the SNF of the \reduced" system (23) contains only two terms
up to any order.
To obtain the unfolding, we assume a 11 6= 0. Other cases can be similarly
discussed. Since equation (20) describes a codimension one system, we expect
that the nal SNF should have only one linear term for the unfolding, and
all higher order terms in equation (20) are eliminated except for, at most, the
terms with the coecients a 20 and a 30 . In other words, the SNF of equation
(20) is expected to have the form:
dy
d
We start from the case a 20 6= 0, and then discuss the general case.
Generic case: Suppose a 20 6= 0, and in addition a 11 6= 0. This is a generic
case. Applying the rst equation of (18) gives
which in turn results in
as expected, i.e., no second order terms can be removed. Similarly, from the
second equation of (18) one can nd the following equations:
a
a 20 a 21 a
First it is observed from equation (29) that if we only use the near-identity
transformation (21), then only the coecient h 11 can be used in equation (29),
and thus a must be retained in the normal form as expected. However, an
additional term a 12 must be retained too in the normal form. More terms (in
addition to a 11 ; a 20 and a will be found in higher order normal forms. This
can also happen in other singularities. This shows that one cannot apply the
\simplied" way to nd SNF of a system with perturbation parameters. In
other words, unlike CNFs, the SNF of system (20) is not equal to the SNF of
the \reduced" system (23), given by equation (24) or (25), plus an unfolding
(which is a 11  for this case).
Secondly, note from equation (29) that with the aid of rescaling, we can remove
g 3 which appears in the SNF of the \reduced" system. There are three
coecients three equations in (29), and thus the three
equations can be solved when It is further seen from equation (29)
must be chosen for the rst equation, indicating that the rescaling
must include the state variable in order to obtain the SNF of the system. h 11
and T 01 are used for the second and the third equations of (29), respectively.
Before continuing to the next order equation, we summarize the above results
as the following theorem.
Theorem 2: The general SNF of system (20) for the single zero singularity
cannot be obtained using only a near-identity transformation. When the rescaling
on time is applied, the SNF of the system can be even further simplied.
However, the rescaling must contain the state variable.
By repeatly applying the recursive formula (11), one can continue the above
procedure to nd the algebraic equations for the third, fourth, etc. order equations
and determine the nonlinear coecients. The recursive algorithm has
been coded using Maple and executed on a PC. The results are summarized
in

Table

1, where NT stands for Nonlinear Transformation. The table shows
the coecients which have been computed. The coecients in the rst row,
are actually the two coecients of the SNF.

Table

1. NT coecients for a 20 6= 0.
l 70 h 61 h 52 h 43 h 34 T 15 h
It is observed from Table 1 that except for the two coecients g 2 and L 1 ,
all other coecients are lined diagonally in the ascending order, according to
one of the subscripts of h ij or T ij . The Maple program has been executed
up to 10th order. But the general rule can be easily proved by the method
of mathematical induction. Note that the coecients h 2j are not presented
in

Table

1, instead the coecients T 1j are used. In fact, the coecients h 2j
do not appear in the algebraic equations and that's why the coecients T 1j
have to be introduced, which causes the state variable involved in the time
rescaling. Further it is seen that the coecients h 0j follows L 1 , the coecients
h 1j follows g 2 , and the coecients T 1j are below g 2 . After this, h
are followed. This rule will be seen again in other non-generic cases discussed
later. Each row of the table corresponds to a certain order algebraic equations
obtained from the recursive equation (11). For example, the two coecients in
the top row are used for solving the second algebraic equations, corresponding
to the coecients of y 2 and y , and thus the SNF of system (20) for a 11 6= 0
and a 20 6= 0 is given by
dy
d
up to any order. The three coecients, in the second row
are used for solving the third order algebraic equations (see equation (11))
corresponding to the coecients y 3 ; y 2  and y  2 . In other words, all the
three third order nonlinear terms in system (20) can be removed by the three
coecients, and so on. All the coecients listed in Table 1 are explicitly expressed
in terms of the original system coecients a ij 's. Therefore, the two
nonlinear transformations given by equations (21) and (22) are now explicitly
obtained.
Simple non-general case: Now suppose a
we assume a 11 6= 0. This is a non-generic case. Then the coecient of the
in the second algebraic equation is identically equal to zero due to
a the solution procedure is similar to Case 1, we omit the detailed
discussion and list the results in Table 2, where

Table

2. NT coecients for a
Thus the SNF of system (20) for this case is given by
dy
d
Note from Table 2 that the top left entry is empty due to a 22 = 0, while g 3
moves downwards by one row. The coecients h 1j still follow g coecient,
and the T ij coecients are still below the g coecients. T 0j coecients do
not change. However, comparing Table 2 with Table 1 shows that Table 2 has
one more line of T 2j coecients, in addition to T 1j . Moreover, there is a new
line given by the coecients h 2j following the empty box where
One may continue to apply the above procedure and execute the Maple program
to compute the SNF of the single zero singularity for the case a
a Tables similar to Tables 1 and 2 can be found. In gen-
eral, we may consider the following non-generic case.
General non-generic case: a As
usual, we assume a 11 6= 0. The results are listed in Table 3, where
and a k0 . This indicates that the SNF of system (20) for the general
non-generic case is
dy
d
The general table has the similar rule as that of Table 1 and 2: T 0j 's follow
follow the empty box where 's follow the non-zero g k , and
lines of coecients

Table

3. NT coecients for a k0 6=
Summarizing the above results yields the following theorem.
Theorem 3: For the system
dx
dt
a 1i  i x +X
a 2i  i x 2 +X
a
which has a zero singularity at the equilibrium
the rst non-zero coecients of a j0 's is a k0 , then the SNF of the system is
given by
dy
d
up to any order.
In the above we only discussed the case a 11 6= 0 which results in the unfolding
a 11  y. Other possible unfolding may not be so simple as this case. However,
they can be easily obtained by executing the Maple program. For example,
suppose a but a 13 6= 0 and a 21 6= 0, then the SNF is found to be
dy
d
up to any order.
Conclusions
An ecient method is presented for computing the simplest normal forms of
dierential equations involving perturbation parameters. The main advantages
of this approach are: (i) it provides an algorithm to compute the kth-order
algebraic equations which only contain the kth-order terms. This greatly save
computational time and computer memory. (ii) The nonlinear transformation
is given in a consistent form for the whole procedure. The zero singularity is
particularly considered using the new approach. It is shown that the SNF for
the single zero singularity with unfolding has a generic form which contains
only two terms up to any order.

Acknowledgment

This work was supported by the Natural Science and Engineering Research
Council of Canada (NSERC).



--R





Normal forms for singularities of vector
Unique normal forms for planar vector
Normal forms for nonlinear vector
Normal forms for nonlinear vector
Unique normal form of the Hamiltonian 1:2-resonance
Further reduction of the Takens-Bogdanov normal forms
Linear grading function and further reduction of normal forms
Simplest normal forms of Hopf and generalized Hopf bifurcations
Unique normal form of Bogdanov- Takens Singularities
Hypernormal forms for equilibria of vector
Hypernormal forms calculation for triple zero degeneracies
The simplest normal form for the singularity of a pure imaginary pair and a zero eigenvalue
Computation of simplest normal forms of di

Singularities of vector
--TR

--CTR
Pei Yu , Yuan Yuan, A matching pursuit technique for computing the simplest normal forms of vector fields, Journal of Symbolic Computation, v.35 n.5, p.591-615, May
