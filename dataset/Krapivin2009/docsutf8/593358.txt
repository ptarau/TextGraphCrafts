--T
Consistency Techniques in Ordinary Differential Equations.
--A
This paper takes a fresh look at the application of interval analysis to ordinary differential equations and studies how consistency techniques can help address the accuracy problems typically exhibited by these methods, while trying to preserve their efficiency. It proposes to generalize interval techniques into a two-step process: a forward process that computes an enclosure and a backward process that reduces this enclosure. Consistency techniques apply naturally to the backward (pruning) step but can also be applied to the forward phase. The paper describes the framework, studies the various steps in detail, proposes a number of novel techniques, and gives some preliminary experimental results to indicate the potential of this new research avenue.
--B
Introduction
Differential equations (DE) are important in many scientific applications in areas such as physics, chemistry,
and mechanics to name only a few. In addition, computers play a fundamental role in obtaining solutions to
these systems.
The Problem A (first-order) ordinary differential equation (ODE) system O is a system of the form
un
In the following, we use the vector representation u simply, Given
an initial condition assuming existence and uniqueness of solution, the solution of O is a
function s  O and the initial condition s   . Note that differential equations
of order p (i.e. f(t; u; u can always be transformed into an ODE by introduction of new
variables. Although an ODE system can potentially be transformed into autonomous ODE
the addition of a new function un+1 (t) (with u 0
prefer to keep the time
variable explicit for a clearer presentation of some of our novel techniques. However, the autonomous form
is more appropriate for some treatment such as automatic differentiation.
There exist different mathematical methods for proving the existence and uniqueness of a solution of an
ODE system with initial value. But, in practice, a system is generally required, not only to prove existence,
but also to produce numerical values of the solution s   (t) for different values of variable t. If, for some classes
of ODE systems, the solution can be represented in closed form (i.e. combination of elementary functions), it
is safe to say that most ODE systems cannot be solve explicitly [Hen62]. For instance, the innocent-looking
equation cannot be solved in terms of elementary functions!
Discrete variable methods aim to approximate the solution s   (t) of any ODE system, not over a continuous
range of t, but only at some points t methods include one-step methods (where
is approximated from the approximation methods (where s
? Proceedings of the Fourth International Conference on Principles and Practice of Constraint Programming, LNCS,
1998.
approximated from the approximation In general, these methods
do not guarantee the existence of a solution within a given bound and may suffer from traditional numerical
problems of floating-point systems.
Interval Analysis in ODE Interval techniques for ODE systems were introduced by Moore [Moo66]. (See
[BBCG96] for a description and a bibliography of the application of interval analysis to ODE systems.) These
methods provide numerically reliable enclosures of the exact solution at points t To achieve
this result, they typically apply a one-step Taylor interval method and make extensive use of automatic
differentiation to obtain the Taylor coefficients [Moo79, Ral80, Ral81, Cor88, Abe88]. The major problem of
interval methods on ODE systems is the explosion of the size of resulting boxes at points t There
are mainly two reasons for this explosion. On the one hand, step methods have a tendency to accummulate
errors from point to point. On the other, the approximation of an aribitrary region by a box, called the
wrapping effect, may introduce considerable imprecision after a number of steps. One of the best systems in
this area is Lohner's AWA [Loh87, Sta96]. It uses the Picard iteration to prove existence and uniqueness and
to find a rough enclosure of the solution. This rough enclosure is then used to compute correct enclosures
using a mean value method and the Taylor expansion on a variational equation on global errors. It also
applies coordinate transformations to reduce the wrapping effect.
Goal of the Paper This paper mainly serves two purposes. First, it provides a unifying framework to
extend traditional numerical techniques to intervals. In particular, the paper shows how to extend explicit
and implicit, one-step and multi-step, methods to intervals. Second, the paper attempts to take a fresh look
at the traditional problems encountered by interval techniques and to study how consistency techniques may
help. It proposes to generalize interval techniques into a two-step process: a forward process that computes an
enclosure and a backward process that reduces this enclosure. In addition, the paper studies how consistency
techniques may help in improving the forward process and the wrapping effect.
The new techniques proposed in this paper should be viewed as defining an experimental agenda to be
carried out in the coming years. The techniques are reasonably simple mathematically and algorithmically
and were motivated by the same intuitions as the techniques at the core of the Numerica system [VHLD97].
In this respect, they should complement well existing methods. But, as it was the case for Numerica, only
extensive experimental evaluation will determine which combinations of these techniques is useful in practice
and which application areas they are best suited for. Very preliminary experimental results illustrate the
potential benefits.
The rest of this paper is organized as follows. Section 2 provides the necessary background and notations.
Section 3 presents the generic algorithm that can be instantiated to produce the various methods. Section 4
describes how to find bounding box. Section 5 describes the step methods used in the forward phase. Section
6 describes the backward pruning based on box-consistency. Section 7 discusses the wrapping effect. Section
presents some experimental results. Section 9 concludes the paper.
Background and Definitions
This paper uses rather standard notations of interval programming. F denotes the set of F-numbers, D the
set of boxes ' ! n whose bounds are in F , I the set of intervals ' ! whose bounds are in F , and D (possibly
subscripted) denotes a box in D. Given a real r and a subset A of ! n , -
r denotes the smallest interval in
I containing r and 2A the smallest box in D containing A. If g is a function, -
and G denote interval
extensions of g. We also use g i (x) and G i (D) to denote the i th component of g(x) and G(D).
The solution of an ODE system can be formalized mathematically as follows.
Solution of an ODE System with Initial Value. A solution of an ODE system O with
initial conditions u(t 0 O and the initial conditions s
In this paper, we restrict attention to ODE systems that have a unique solution for a given initial value.
Techniques to verify this hypothesis numerically are given in the paper. Moreover, in practice, as mentioned,
the objective is to produce (an approximation of) the values of the solution function s   of the system O
at different points t . It is thus useful to adapt the definition of a solution to account for this
practical motivation.
Solution of an ODE System. The solution of an ODE system O is a function
such that s(t is the solution of O with initial conditions u(t 0
The solution of an ODE system O can be used to obtain the solution of O at any point for any initial value.
It is useful to extend our definition to sets of values.
Solution of an ODE System. Let s be the solution of an ODE system O. The set
solution O at t 1 wrt t 0 and D is the set s(t
The interval techniques presented in this paper aim at approximating set solutions as tightly as possible.
The next definition introduces the concept of bounding box that is fundamental to prove the existence and
the uniqueness of a solution to an ODE system over a box and to bound the errors.
Bounding Box. Let s be the solution of an ODE system O. A box B is a bounding box of s
in
Informally speaking, a bounding box is thus an enclosure of the solution on the whole interval
following theorem is an interesting topological property of solutions.
Theorem 5. Let O be an ODE system u s be the solution of O (i.e. existence and
uniqueness), and let F r be the frontier of D. Then,
1. closed set;
2. is the frontier of s(t
Proof. (Sketch) Under the given hypothesis, s 2 C [Har64]. It can then be shown that a point in D n F r
cannot belong to the frontier of s(t
As a consequence, s(t can be computed by considering the frontier of D j only.
3 The Generic Algorithm
The interval methods described in this paper can be viewed as instantiations of a generic algorithm. It
is useful to present the generic algorithm first and to describe its components in detail in the rest of the
paper. The generic algorithm is parametrized by three procedures: a procedure to compute a bounding box,
since bounding-boxes are fundamental in obtaining enclosures, a step procedure to compute forward, and a
procedure to prune by using step procedures backwards. Procedure BoundingBox computes a bounding
box of an ODE system in an interval for a given box. Procedure Step computes a box approximating the
value of s   (t j ) given the approximations of s   and the bounding boxes
Procedure Prune prunes the boxes D j at t j using the box D j \Gamma1 at . The intuition underlying the basic
step of the generic algorithm is illustrated in Figure 1. The next three sections review these three components.
Note however that it is possible to use several step procedures, in which case the intersection of their results
is also an enclosure.
begin
forall(j in 1::n)
begin
Fig. 1. Computing correct enclosures of the solution
4 The Bounding Box
This section considers how to obtain a bounding box for an ODE system. As will become clear later on,
bounding boxes are fundamental to obtain reliable solutions to ODE systems. The traditional interval techniques
to obtain bounding boxes are based on Picard operator [Har64, Moo79].
Theorem6 (Picard Operator). Let D 0 and B be two boxes such that D 0 ' B, let
O be an ODE system u continuous and has a Jacobian (i.e first-order
partial derivatives) over \Phi be the transformation (Picard Operator)
where F be an interval extension of f .
If \Phi(B) ' B, then 1. The O system with initial value u(t has a unique solution s;
2. \Phi(B) is a bounding box of s in [t
Theorem 6 can be used for proving existence and uniqueness of a solution and for providing a bounding box
[Loh87, Cor95]. A typical algorithm starts from an approximation B applies Picard operator.
If \Phi(B 0 ) 6' B, the algorithm widens B 0 into B 1 (e.g., by doubling its size) and iterates the process. The
algorithm can also narrow the step size. Note that the existence of Jacobian(f) can be checked numerically
by evaluating its interval extension over the box. Note also that the Picard operator uses a Taylor expansion
of order 1. It can be generalized for higher orders, which is interesting to increase the step sizes.
5 The Step Methods
This section describes the step methods. The step methods are presented in isolation. However, as mentioned
previously, they can be used together, since the intersection of their results is also a step method.
5.1 Explicit One-Step Methods
This section considers one-step methods: It first describes traditional numerical methods, moves to traditional
interval methods, and proposes improvements which can be obtained from consistency techniques.
Traditional Numerical Methods To understand traditional interval methods, it is useful to review
traditional numerical methods. In explicit one-step methods, the solution s of an ODE system O is viewed
as the summation of two functions:
where the function sc can always be computed while the function e cannot. As a consequence, a traditional
numerical method based on an explicit one-step method is an algorithm of the form
forall(i in 1::n)
This algorithm tries to approximate the solution s   (t) for an initial value u(t
Example 1 Taylor Method. The Taylor method is one of the best known explicit one-step methods where the
function sc is given by the Taylor expansion of a given order p, i.e.,
Interval Methods The key idea underlying (explicit or implicit) one-step interval methods is to define
an extension of the interval solution s. 3
Interval Solution of an ODE System. Let s be the solution of an ODE system O. An
interval solution of O is an interval extension S of s, i.e.
As a consequence, a traditional interval method based on an one-step method is an algorithm of the form
forall(i in 1::n)
This algorithm provides safe intervals for s   (t 1
Direct Interval Extensions Traditionally, interval solutions are often constructed by considering an
explicit one-step function s(t by taking an interval extension SC of sc
and by using a bounding box to bound the error function e to obtain a function of the form S(t
Direct Explicit One-Step Interval Extension. Let s be an explicit one-step solution of
an ODE system O of the form
A direct explicit one-step interval extension of s is an interval solution S of the form
where SC is an interval extension of sc, B 0 is a bounding box of s in [t is an interval
extension of e.
3 As usual, interval solutions could also be defined on particular subsets of F and D.
Example 2 Taylor Interval Solution. The Taylor Interval Solution of order p of an ODE system O is defined
as
bounding box of s in [t and the interval functions F (j) are interval
extensions of functions f (j) inductively defined as follows [Moo66] (f (j) is the "total j th derivative of f wrt
(j \Gamma1)
@t
1-m-n
(j \Gamma1)
@um
More information on automatic generation of the value of these functions can be found in [Moo79, Ral80,
Piecewise Interval Extensions Direct interval techniques propagate entire boxes through interval solu-
tions. As a consequence, errors may tend to accummulate as computations proceed. This section investigates
a variety of techniques inspired by, and using, consistency techniques that can be proposed to reduce the
accummulation of errors. The main idea, which is used several times in this paper and was inspired by
box-consistency, is to propagate small boxes as illustrated in Figure 2.
u2
Fig. 2. A Piecewise Interval Solution
s be a solution to an ODE system
O of the form
A piecewise explicit one-step interval extension of s is a function S(t defined as
where SC is an interval extension of sc, B 0 is a bounding box of s in [t is an interval
extension of e.
Piecewise interval extensions of an ODE system are not only a theoretical concept: they can in fact also
be computed. The basic idea here is to express piecewise interval extension as unconstrained optimization
problems.
Let s be a solution to an ODE system O of the form
A piecewise explicit one-step interval extension of s is a function S(t defined as
where SC is an interval extension of sc, B 0 is a bounding box of s in [t is an interval
extension of e.
Note that these minimization problems must be solved globally to guarantee reliable solutions. The implementation
section discusses how a system like Numerica may be generalized to solve these problems. The
efficiency of the system of course depends on the step size, on the size of D 0 , and on the desired accuracy. It
is interesting to observe that the function SC does not depend on the error term and hence methods that are
not normally considered in the interval community (e.g., Runge-Kutta method) may turn beneficial from a
computational standpoint. It is of course possible to sacrifice accuracy for computation time by using projec-
tions, the fundamental idea behind consistency techniques. For instance, interval methods are generally very
fast on one-dimensional problems, which partly explains why consistency techniques have been successful to
solve systems of nonlinear equations.
s be a solution to an ODE
system O of the form
A box-piecewise explicit one-step interval extension of s wrt dimension i is a function S i defined as
where SC is an interval extension of sc, B 0 is a bounding box of s in [t is an interval
extension of e. The box-piecewise explicit one-step interval extension of s wrt E and B is the function
Each of the interval solutions reduces to a one-dimensional (interval) unconstrained optimization problem.
The following property is a direct consequence of interval extensions.
Solution. The piecewise and
box-piecewise one-step interval extensions are interval solutions.
In essence, box-optimal solutions safely approximate a multi-dimensional problem by the intersection of
many one-dimensional problems. Of course, it is possible, and probably desirable, to define notions such as
box(k)-piecewise interval solutions where projections are performed on several variables. Finally, notice that
optimal interval solutions were defined with respect to a given bounding box. More precise interval solutions
could be obtained if local bounding boxes were considered in the above definitions. It is easy to generalize
our definitions to integrate this idea.
5.2 Implicit One-Step Methods
This section considers implicit one-step method. It first reviews traditional numerical methods and shows
how they can be generalized to obtain interval methods. The presentation essentially follows the same lines
as the previous section.
Traditional Numerical Methods In implicit one-step methods, the solution of ODE O is viewed as the
solution of an equation.
solution to an ODE system O is a function
of the form s(t is the solution of an equation
Since the error term cannot be computed in general, the above equation is replaced in practice by its
approximation As a result, an implicit one-step method is an algorithm of the form
forall(i in 1::n)
where solve(S) returns an element x in Solution(S), the set of solutions of S.
Example 3 Trapezoid Method. The trapezoid method is an implicit-one step method that consists of solving,
at each step, an equation of the form u
Interval Methods We now show how to generalize implicit one-step methods to intervals. The basic idea
is to replace the search for a solution to a system of equations by a search for the solutions of a set of interval
equations. The resulting interval solution can then be used as in explicit methods.
Direct Implicit One-Step Interval Extension. Let s(t is the
solution of the equation be an implicit one-step interval solution of an
ODE system O. Let SC be an interval extension of sc and E be an interval extension of e. A direct implicit
one-step interval extension of s is an interval function S(t
and B 0 is a bounding box of s in [t
Note that this definition amounts to finding all solutions of an "interval equation" in a box. The definition
uses the bounding box as the initial search space. However, any step method can be used instead to provide
a smaller search space.
Example 4 Trapezoid Interval Method. The trapezoid interval extension of the trapezoid method requires the
solving of the system of interval-valued equations
is an interval extension of f , and B 0 is a bounding box of s in [t
It is possible to improve this result by incorporating the idea of piecewise interval extension proposed earlier.
Coarser extensions can be defined in a similar way as well.
is the
solution of the equation be an implicit one-step interval solution of an
ODE system O. Let SC be an interval extension of sc and E be an interval extension of e. A piecewise
implicit one-step interval extension of s is an interval function S(t
are canonical g
and B 0 is a bounding box of s in [t
4 The interval relation - is an interval extension of equality, i.e.,
5.3 Multi-Step Methods
Some methods for solving ODE are multistep methods that compute the value at point from values at
point 1). Obviously, the value at points t must be computed by
some other method. In order to define interval extensions of such methods, we extend our definition of
solution and interval solution. We use the following notations
Multistep Solution of an ODE System. Let s be the solution of an ODE system O. The
multistep solution of O at t k wrt ~ t; ~
D is the set
Solution of an ODE System. Let ms be the multistep solution of
an ODE system O. A multistep interval solution of O is an interval extension S of ms, i.e.
Explicit Multi-Step Methods In explicit multi-step methods, the solution s of ODE O is decomposed
as
These methods can be generalized to intervals in a way similar to one-step methods. For brevity, we only
give an example of such an interval method.
Example 5 Adams-Bashforth Interval Solution (Order 4). Let h be t 4. The Adams-Bashforth
interval solution of order 4 is the multi-step interval solution
where
and B is a bounding box of s in [t . Notice that F (4) ([t can be approximated by
is a bounding box of s in
Implicit Multistep Methods Implicit multi-step methods can be defined in a similar fashion. Let u
The value of u k is the solution of the equation :
Example 6 Adams-Moulton Implicit Multi-Step Interval Solution. Let 3. The
Adams-Moulton implicit multi-step interval solution is the function defined as
where
& D is canonical & B is a bounding box of s in [t
5.4 Mean Value Form Step Methods
It can be observed that, in all our explicit interval solutions S,
indicating that the intervals are thus growing. Mean value forms have been proposed to use contraction
characteristics of functions and may return smaller intervals. From Equation 1, we may apply the mean
value theorem on variable u) to obtain
for some - between u and m. As a consequence, any interval solution of s, may serve as a basis to define a
new interval solution.
Let D be a box hI be the center of I i , and EM be an interval
solution of an ODE system O. The MVF solution of O in D wrt SCM , denoted by - is the
interval function
d
In the above definiton, the interval function
d
can be evaluated by automatic differentiation, during
the evaluation of SC(t The definition also generalizes to multistep interval extensions.
Implementation Issues
Several of the novel techniques proposed in this section can be reduced to unconstrained optimization prob-
lems. In general, interval techniques for unconstrained optimization problems require the function to satisfy
a stability requirement (i.e., the optimum is not on the frontier of the box defining the search space). This
requirement is not guaranteed in this context since, by Theorem 5, we know that the minimum of function
s is on the frontier of D 0 , and we minimize function sc, an approximation of s.
min-stability. A function g is min-stable for box there exists
with
be a box and be a function to minimize in K. Here are some
necessary conditions for a point d in K to be a minimum when the function is not min-stable.
@g
is in the interior of K i
@g
@g
Traditional interval algorithms for unconstrained minimization can be generalized to include the interval
meta-constraints
d
d
d
with
d
an interval extension of
, and i. The search can also be restricted to the
frontier by adding the redundant constraint
1-i-n
and applying techniques such as constructive disjunction [VHSDar]. Note that combining these two necessary
conditions require some extra care to preserve correctness.
6 Backwards Pruning: Box-Consistency for ODE
This section proposes another technique to address the growth of intervals in the step methods. The fundamental
intuition here is illustrated in Figure 3. We know that all the solutions at are in D j \Gamma1 . If, in D j ,
there is some box H such that then we know that the box H is not part of the
solution at t j . In other words, it is possible to use the step methods backwards to determine whether pieces
of the box can be pruned away. This section formalizes this idea in terms of box-consistency.
Fig. 3. Pruning
consistency aims at reducing a box D j at t j given that the solution at are known to be in D j \Gamma1 .
Interval Projection of an ODE System. An interval projection ODE hS; ii is the association
of an interval solution S and of an index i (1 - i - n).
Consistency of an ODE System. Let S be an interval solution of an ODE system
O. An interval projection ODE hS; ii is box-consistent at
I
where solution is box-consistent at its projections are
box-consistent at
Proposition22. Let D projection ODE hS; ii is box-consistent
at
and, when l
Traditional propagation algorithms can now be defined to enforce box-consistency of ODE systems.
7 The Wrapping Effect
The wrapping effect is the name given to the error resulting from the enclosure of a region (which is not a
box) by a box. It only occurs for multidimensional function. In one dimension, a perfect interval extension
of a continuous function g always yields the correct interval. However, a perfect interval extension of a
multidimentional function g introduces overestimations in the resulting box, because the set
Dg is not necessarily a box. This effect is especially important when the enclosure is used for finding a new
region which is also enclosed by a box. The wrapping effect is thus central in interval methods for ODE. The
following classical example, due to Moore [Moo66] and explained in [Cor95] , illustrates this problem :
0:9 1:1
The trajectories of individual point-valued solutions of this ODE are circles in the ((u) 1 ; (u) 2 )-phase space.
The set of solution values is a rotated rectangle. Figure 4 shows that the resulting boxes at
Moore shows that the width of the enclosures grow exponentially even if the stepwise converges to
zero. The wrapping effect can be reduced by changing the coordinate system at each step of the computation
process. The idea is to choose a coordinate system more appropriate to the shape of
reducing the overestimation of the box representation of this set, as illustrated in Figure 5.
Fig. 4. The Wrapping Effect
(u)(u)Fig. 5. Reducing the Overestimation by Coordinate
Transformation
An appropriate coordinate system has to be chosen at each step. Assuming that such coordinate systems are
given by mean of (invertible) matrices M j , a naive approach, based on an explicit one-step method, would
consist of computing
where D 0
j and D 0
are the boxes at t j and t j \Gamma1 in their local coordinate system. This approach is naive
since it introduces three wrapping effects: in
to restore the original coordinate system needed to
compute S, in the computation of S, and in the computation of M \Gamma1
to produce the result in the new
coordinate system. To remedy this limitation, more advanced techniques (see, for instance, [Loh87, Ste71,
DS76]) have been proposed but they are all bound to a specific step procedure. For instance, Lohner merges
the two naive steps together using a mean value form and use associativity in the matrix products to try
eliminating the wrapping effect. More precisely, the key term to be evaluated in his step method is of the
and the goal is to choose M \Gamma1
j so that M \Gamma1
is close to an identity matrix.
Piecewise interval extensions, however, reduce the wrapping effect in the naive method substantially,
as illustrated in Figure 6. The overestimations of
on ffl-boxes introduce wrapping
Fig. 6. Coordinate transformation on ffl-boxes
Taylor Piecewise Taylor Exact solution
2.0 [-7.388637 , 7.388637] 5359.51% [-0.135783 , 0.135783] 0.33% [-0.135335 , 0.135335]
2.5 [-12.181631 , 12.181631] 14740.26% [-0.082424 , 0.082424] 0.41% [-0.082085 , 0.082085]

Table

1. ODE u
effects that are small compared to the overall size of the box and to the benefits of using piecewise interval
extensions. In addition, this reduction of the wrapping effect is not tailored to a specific step method. The
basic idea is thus (1) to find a linear approximation of
to compute the matrix
j from the linear relaxation; (3) to apply the naive method on ffl-boxes. Step (1) can be obtained by
using, for instance, a Taylor extension, while Step (2) can use Lohner's method that consists of obtaining a
QR factorization of the linear relaxation. Lohner's method has the benefit of being numerically stable.
8 Experimental Results
This section compares some standard techniques with piecewise interval extensions. This goal is to show that
consitency techniques can bring substantial gain in precision. The results were computed with Numerica with
a precision of 1e-8, using optimal bounding boxes.
Consider the ODE u for an initial box [-1,1] at t compares the results obtained
by an interval Taylor method of order 4 with step size 0:5, the results obtained by the piecewise interval
extension of the same method, and the exact solutions. Relative errors on the size of the boxes are also
given. As can be seen, the intervals of the traditional Taylor method grow quickly, although this function is
actually contracting. The piecewise interval extension, on the other hand, is close to the exact solutions and
is able to exploit the contraction characteristics of the function.
Consider now the ODE u for an initial box [0:1; 0:4] at t compares the results
obtained by a mean value form of a Taylor method of order 4, the results obtained by the piecewise interval
extension of the Taylor method of order 4, and the exact solutions. Once again, it can be seen that the
standard method leads to an explosion of the size of the intervals, while the piecewise interval extension is
close to the exact results. Note that the Taylor method of order 4 also behaves badly on this ODE.
Taylor MVF Piecewise Taylor Exact solution
2.5

Table

2. ODE u
Taylor Piecewise Taylor Exact solution

Table

3. ODE u 0
Consider now the system ae u 0
for an initial box ([5.9,6.1],[3.9,4.1]) at t compares the results obtained by an interval Taylor
method of order 4, the results obtained by the piecewise interval extension of the same method, and the
exact solutions. Once again, similar results can be observed.
9 Conclusion
This paper studied the application of interval analysis and consistency techniques to ordinary differential
equations. It presented a unifying framework to extend traditional numerical techniques to intervals showing,
in particular, how to extend explicit and implicit, one-step and multi-step, methods to intervals. The paper
also took a fresh look at the traditional problems encountered by interval techniques and studied how
consistency techniques may help. It proposed to generalize interval techniques into a two-step process: a
forward process that computes an enclosure and a backward process that reduces this enclosures. In addition,
the paper studied how consistency techniques may help in improving the forward process and the wrapping
effect. Very preliminary results indicate the potential benefits of the approach. Our current work focuses
on the full implementation and experimental evaluation of the techniques proposed in this paper in order
to determine which combinations of these techniques will be effective in practice. Future work will also be
devoted to the application of consistency techniques to ODE systems with boundary values, since interval
analysis and consistency techniques are particularly well-adapted when compared to traditional methods (as
observed by several members of the community).

Acknowledgment

Many thanks to Philippe Delsarte and Jean Mawhin for fruitfull discussions. This research is partially
supported by the Actions de recherche concert'ees (ARC/95/00-187) of the Direction g'en'erale de la Recherche
Scientifique - Communaut'e Fran-caise de Belgique and by an NSF NYI award.



--R

Precise Numerical Analysis.
Computational Differen- tiation: Techniques
Applications of differentiation arithmetic.
Theory of Numerics in Ordinary and Partial Diffential Equations (W.
Consistency Techniques in Ordinary Differential Equa- tions
Guaranteed Error Boubds for the Initial Value problem Using Polytope Arithmetic.
Ordinary Differential Equations.
Discrete Variable Methods in Ordinary Differential Equations.
Enclosing the solutions of ordinary initial and boundary value problems.
Interval Analysis.
Methods and Applications of Interval Analysis.
Applications of software for automatic differentiation in numerical computation.
Automatic Differentiation: Techniques and Applications
Enclosing Solutions of Ordinary Differential Equations.
A Heuristic to Reduce the Wrapping Effect in the Numerical Solution of ODE.
Modeling Language for Global Optimization.
The Design
--TR

--CTR
Marco Kletting , Andreas Rauh , Harald Aschemann , Eberhard P. Hofer, Consistency tests in guaranteed simulation of nonlinear uncertain systems with application to an activated sludge process, Journal of Computational and Applied Mathematics, v.199 n.2, p.213-219, 15 February 2007
