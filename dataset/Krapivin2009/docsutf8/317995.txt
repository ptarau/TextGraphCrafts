--T
An effective admission control mechanism for variable-bit-rate video streams.
--A
For admission control in real-time multimedia systems, buffer space, disk bandwidth and network bandwidth must be considered. The CBR-based mechanisms do not use system resources effectively, since media data is usually encoded with VBR compression techniques. We propose an admission control mechanism based on a VBR data model that has a dynamic period length. In our mechanism, the period can be adaptively changed to maximize the performance, considering both disk bandwidth and buffer space. To compare the performance, extensive simulations are conducted on RR, SCAN, and GSS schemes which have the dynamic period length and the static period length.
--B
Introduction
Multimedia systems like VOD (Video-On-Demand) systems require considerable resources
and have tight real-time constraints. Multimedia data to be sent to clients must be read from
disk to memory buffers before the actual transmission, and thus the maximum number of
clients that the system can support depends upon both disk bandwidth and total buffer size.
This work was supported in part by Korea Science and Engineering Foundation Grant(95-0100-23-04-3)
Video servers must be able to support heterogeneous clients that request vastly different QoS
(Quality of Service) parameters, such as display size, resolution, and display frame-rate. In
the process of accepting a new client (Admission Control), the server should not violate the
QoS of the streams already being serviced (Active Streams). To guarantee the QoS of the
active streams, the required resources must be reserved in advance by the admission control
mechanism.
In many admission control approaches, resources are reserved based on the worst-case assumption
of a peak-data-rate CBR (Constant Bit Rate) data model [3, 4, 9]. However, since
video data objects are usually generated with VBR (Variable Bit Rate) compression tech-
niques, CBR-based approaches tend to waste resources. There are some existing admission
control mechanisms which use a VBR data model to reserve buffer space. However, they do
not consider disk bandwidth or assume CBR data retrieval from the disk [17]. There is a close
relationship between disk bandwidth and buffer space, and an admission control mechanism
should consider both simultaneously. Although some existing mechanisms do consider both
buffer space and disk bandwidth, they are based on the CBR data model [3].
Many video streams are encoded using a VBR technique, in which the display data-rate
and the state of remaining resources varies constantly. Even if resources are reserved using
VBR characteristics, fewer streams than is optimal may still be accepted when using a static
period length. To maximize the number of acceptable streams, the period length should
be changed dynamically according to the state of the remaining resources. For example, if
the available buffer space is sufficient but the available disk bandwidth is low, then a long
period would show better performance than a short one, while if the available disk bandwidth
is sufficient but the available buffer space is low, then a short period would show better
performance.
To compare the trade-offs among several disk scheduling algorithms such as RR(Round
Robin), SCAN and GSS(Grouped Sweeping Scheme), we derived the equations for the distance
of head movement in one seek for each scheduling algorithm and analyzed the buffer
requirements. In this paper, we propose a new admission control scheme, which exploits the
characteristics of VBR data and which uses a dynamic time period in scheduling.
The rest of the paper is organized as follows: Related works are presented in section 2 and
the disk latency and the buffer requirements of several disk scheduling schemes are discussed
in section 3. Our admission control algorithm using dynamic period is proposed in section
4 and our simulation results are presented in section 5. Finally, our conclusions are given in
section 6.
Related Work
A VOD server should support several concurrent requests and should guarantee the Quality
of Service (QoS) of each request. Accepting a new client should not degrade the QoS of other
active streams. There are two approaches to admission control, optimistic and pessimistic [18].
In a pessimistic approach, resources are reserved using the worst-case (peak-rate) assumption.
This approach uses static resource reservation, so there is little overhead and no possibility of
overflow or starvation, but fewer clients are accepted than is ideally possible. In an optimistic
approach, a new request is accepted if the total resource requirements do not exceed the
total amount of available resources. This approach accepts more users than the pessimistic
approach, but QoS can be violated in some situations.
Scheduling algorithms play an important role in VOD systems, where concurrent streams
need to be read effectively [13, 14, 15, 19]. The simplest method is Round Robin (RR).
In RR scheduling, the streams are serviced in the same order in each service cycle(period).
It appears fair, needs little overhead in scheduling, and needs less buffer space than other
methods [5]. However, the disk head is required to move in a random manner, and the seek
latency may thus become large. The best known algorithm for real-time scheduling of tasks
with deadlines is the Earliest Deadline First (EDF) algorithm. In EDF scheduling, after
one media block has been accessed from the disk, the media block with the earliest deadline
is then scheduled for retrieval next. Scheduling of the disk head based solely on the EDF
policy, however, may yield excessive seek times and rotational latency, and may thus lead
to poor utilization of server resources [1]. A third algorithm, SCAN, operates by scanning
the disk head back and forth across the surface of the disk, retrieving a requested block as
the head passes over it [6]. One variant of this basic algorithm combines SCAN with EDF,
and is referred to as the SCAN-EDF scheduling algorithm [15]. In SCAN-EDF scheduling,
the requests with the earliest deadlines are served first, but if several requests have the same
deadline or deadlines lying closely together, then their respective blocks are accessed using
the SCAN algorithm. Clearly, the effectiveness of the SCAN-EDF technique is dependent on
how many requests have the same deadline. If all of the media blocks to be retrieved during
a period are assigned the same deadline, then SCAN-EDF is effectively reduced to SCAN.
Although SCAN scheduling schemes have shorter seek times (or latency times), they need
much more buffer space. Since the first stream serviced in the current period can be the last
stream in the next period, the amount of data stored in the buffer must be sufficient to last
for two periods if starvation is to be prevented. GSS (Grouped Sweeping Scheme) scheduling
divides the streams into several groups, which are each serviced RR style, while the streams
in each group are serviced SCAN style [21]. If the number of groups is large, GSS acts like
RR, while if the number is small, it acts like SCAN.
As observed in [4], the most natural way to process multiple streams simultaneously is
to interleave the readings of the streams in a cyclic fashion. As illustrated in figure 1, each
period (cycle or round) consists of a set of working slots and latency slots.
latency
working slot
slot
latency
slot
working slot
leftover
Tperiod

Figure

1: Periodic stream service
The amount of data that must be read from the disk for each stream within a working slot
should be sufficient for the client for one period (cycle). After one stream has read sufficient
data, a new stream starts to read the data, and there must be at least one seek to switch to
another stream. The latency slot includes these seek latencies and other scheduling overhead
latencies.
Chen et al. [3] proposed a scheme to find lower and upper bound of the period. Sufficient
data to be sent must be in the buffer in any period to service all clients without a hiccup. As
the service period becomes longer, each stream must read more data from the disk into the
buffer. However, due to the limited size of the buffer, the period can not be longer than a
certain maximum value and this is the upper bound(say, T max ). To read all the necessary data
in a short period, high disk bandwidth is required. Due to the limit of disk bandwidth, the
period can not be shorter than some minimum value and this is the lower bound(say, T min ).
The upper/lower bound can be calculated according to the allowable overflow/starvation
probability which is given as the QoS(Quality of Service) parameter. If we service clients with
a period between the lower bound and the upper bound, then the probability of starvation
or overflow will be less than the given QoS value. To support all active streams with the
current available buffer space and disk bandwidth, the period length(T period ) must satisfy the
following inequality:
This paper shows clearly the period length is affected by both the buffer space and the
disk bandwidth. In [3], it was assumed that playback data rate(R c ) is constant (CBR data
model, based on a pessimistic approach) making it very easy to calculate the T min and T max .
But, since a pessimistic approach was used, system resource utilization was quite low.
Some buffer management schemes using VBR characteristics have been suggested. In
NOD (News On Demand) [20], the length of a stream is short and the requests are in bursts.
If each stream is serviced in a cyclic manner based on CBR, then there can be spare resources
reserved but unused. These spare resources can be used for a current stream being serviced,
shortening the service time for the current stream. A new request can then be accepted more
quickly. Basically, however, the NOD scheme uses worst-case assumption and cannot achieve
satisfactory system utilization.
The pessimistic approach reserves buffer space according to the maximum frame size of all
of the frames during the lifetime of a stream. If we divide the video data object into several
small parts, find the largest size in each part, and then reserve the buffer using this local
maximum, system utilization can be improved. However, if we divide the video object into
parts that are too small, the calculation overhead can become very large. In [17], the video
data object is divided by the window size (say, 30 frames), the maximum size of frames in
each window is found, and the buffer is reserved using each local maximum. However, there
is no exact assumption of disk bandwidth.
3 System Modeling
Buffer space and disk bandwidth are the most important factors that determine the number
of streams that a VOD server can accept. However, full disk bandwidth can not be used, due
to latency. Seek latency is the largest part of the latency time, and the number of cylinders
that the disk head should move in one seek is the major part of seek latency. We therefore
model the seek distance first. In our system model, we assume the network has an infinite
bandwidth.
3.1 The number of cylinders to be crossed in one seek
According to [11, 2] seek time is maximized, under a realistic function for the seek time,
for equidistant seek positions of the n requests. The seek time function itself is assumed
to be proportional to the square root of the seek distance for small distances below a disk
specific constant, and a linear function of the seek distance for longer distances, which is in
accordance with the studies of [16]. Thus, for given disk parameters, the maximum total seek
time of a sweep can be easily computed by assuming the n seeks positions to be at cylinders
(i is the total number of disk's cylinders, and applying
time function. This computation yields an upper bound for the seek time [8]. That is, if
we use the following formula as the number of cylinders to be crossed in one seek, then there
will be almost no starvation caused by the seek latency.
The Number of Cylinder in one
To be adapted for GSS scheduling, equation ( 2) should be extended. We had better
divide the streams into groups of equal size(except for the last group) to reduce the seek time
skewness among the groups. If we assume that streams are divided into g groups, then the
number of members in a group will be round( n
) and the number of members in the last group
will be
In a GSS scheme, SCAN scheduling is used for all streams in a group, so by ( 2), we get the
following formula.
c
Since g is the same as n in RR scheduling, the number of cylinder in one seek will be
c
. Kiessling et al [7] showed that the expectation(or average) of the number of cylinders to
be crossed in one seek is c
3 in RR scheduling scheme. If we use c
3 instead of c
2 in modeling
the seek distance, then we may utilize disk bandwidth more effectively. However, since the
probability of starvation will increase much higher, we used cinstead of c3.2 Comparison of the buffer usage factor for various scheduling schemes
In RR scheme, the order in which streams are serviced does not change from one period to
another. Thus, we need to load data sufficient for only one period(say T). But in SCAN
scheme, the order of service depends on the physical positions of the logical blocks. In the
worst case, the stream serviced first in the current period can be serviced last in the next
period. Since we do not know the order in advance, the total amount of data able to be read
into the buffer should be sufficient for 2 periods (say 2T ) to guarantee problem-free playback.
This means that 50% of the buffer may be wasted in the SCAN scheme, as compared to the
RR scheme. In the GSS scheme, every stream in one group is serviced by SCAN scheduling,
but each group is serviced by the RR scheme. If the number of groups is g(g ! n), then the
total amount of data to be loaded into buffer should be sufficient for
. We can therefore
say that we waste T
buffer space. If then the wastage is the same as for SCAN,
and if the same as for RR 1 . Figure 2 illustrates this reasoning.
Period 2
Period 1
(c) GSS
Period 1 Period 2
(b) SCAN00000000000000000111111111111111110000111100001111
Period 2
Period 1
(a) RR

Figure

2: Maximum time between reads for RR, SCAN, and GSS
4 Proposed Admission Control Algorithm
Most earlier works used the fixed time period and CBR data modeling. Buffer space, disk
bandwidth and the sum of the playback data-rate of all active streams are the three most
important factors in choosing the length of a period. As the playback data-rate of an active
stream does not vary during playback in the CBR scheme, we do not need to change the
length of the period. These approaches are simple but inefficient when used with VBR data.
When servicing VBR data, the optimal length of the period would vary frequently according
to the playback, depending on which streams are being played or which parts are being played.
Since the static period length causes the system to accept less streams than is possible, we
propose to use dynamic period length to maximize efficiency.
1 If we look at figure 2 more closely, then we can find the maximum time differences between two reads in
RR, SCAN and GSS scheduling are T , respectively where jsj is the length of a slot
time(sum of a latency slot and a working slot). When does not look the same as T
But since T=n ' jsj, T is almost the same as T
We should find some schedulable set of periods to accept a new stream. Assuming that
current time period is T i , we can get T min and T max by the mechanism given in [3]. If
(schedulable), we can take some value between T min and T max as the next time
period, T i+1 , and add this period to the period set ST (ST is first initialized with empty set).
There are many choices in taking T i+1 , but we use Tmin+Tmax
2 as T i+1 intuitively and start
the step to get T i+2 with T i+1 . If T min ? T max (unschedulable), the new stream can not be
accepted. We can accept the new stream if there is no unschedulable period until the sum of
period s in ST becomes larger than the length of the playback time of the stream. Assuming
that we decide to accept a stream after the k-th step, ST will be as follows.
As stated in [3], the average playback rate of each stream is required to calculate the
T min and T max . Since they used CBR data model, the playback rate is constant all the time.
However, it varies dynamically from period to period. Let Rc i (j) be the average playback
data-rate of stream j at some period T i and t be the start time of the next period. Then
(j), the data-rate of stream j at T i , is the sum of all frames belonging to T i divided by T i
and the data-rate of the next period is the sum of all frames in [t; t
Since T i+1 is not known for the current period, we can not get an accurate data-rate for T i+1 ,
so we approximate T i+1 using T i . We add all the frames in [t; t divide that by T i to
get d
(j)(approximation of Rc i+1 (j)). Since we have d
now, we can get T min and
finally we can get T i+1 . However, the error from approximating T i+1 , can result in
either starvation or buffer overflow.
Let us consider the case where T i is larger than T i+1 and let the difference between T i and
T i+1 be \DeltaT . Assume that the average size of frames in smaller than the
average of frames in [t; t as shown in figure 3(a), the approximated data-rate,
d
Rc i+1 (j), is smaller than the actual data rate Rc i+1 (j). This means that the total amount of
resources required is underestimated and more resources may be needed when playing-back.
In the case that T i is smaller than T i+1 , if the average size of the frames in [t; t +T i ] is smaller
than the average of frames in [t +T then as shown in figure 3(b), the approximated
data rate, d
Rc i+1 (j), is smaller than the actual data rate Rc i+1 (j). This means that the total
amount of resources required is underestimated, and it might result in the same problems.
To cope with these problems, we reserve a small fraction of resource to overcome starvation
and overflow problems. From our simulation, 1% of disk bandwidth and 5% of buffer space
was sufficient to guarantee that neither starvation nor overflow occurs. Even if we do not
leave any spare resource (100% of resources are allocated), the probability of starvation or
overflow is less than 0.05% as shown in section 5.
Rc (j)
Rc (j)
Data
Rate
(a) (b)
Data
Rate
Time

Figure

3: The difference between real playback data rate and approximated rate
Our admission control algorithm based on VBR data modeling and dynamic period length
is given below.
boolean AcceptanceTest(New
/* Initialize variables */
Length of Current P eriod;
Starting Time of Next P eriod; /* End Time of Current Period */
T in ST ! P layback Time of New
Add all frame sizes of Active Streams and New Stream in [t; t
Get
of Rc(j)s in Active Streams and New Stream */
Get T min and T max using
else f
break;
return AcceptNewStream;
If AcceptanceTest() returns FALSE, the new stream can not be accepted, and we may retry
at either the next time period or a few periods later. If AcceptanceTest() returns TRUE, the
new stream can be serviced from the next period using the new period set obtained during
the test. Time complexity of the algorithm is O(m \Delta n), where m is the number of active
streams and n is the number of frames in the stream being tested.
5 Experimental Evaluation
5.1 Assumptions
Most existing storage-server architectures employ random allocation of blocks on a disk. Since
the latency between the blocks of a media object is unpredictable, this type of organization
is insufficient to meet the real-time constraints of a multimedia application. Contiguous disk
block allocation yields the highest effective disk bandwidth, but has the penalty of costly
reorganization during data insertion and updates. However, since video data objects are
seldom modified, contiguous allocation is not an unreasonable assumption in a VOD system
contiguous allocation is impossible, then the use of blocks of the maximum size possible is
best). Even if we store the data on contiguous blocks, latency is inevitable, because a VOD
server must support several streams concurrently. At least one seek is necessary to switch to
another stream.
In this paper, we use Round Robin, SCAN, and GSS as scheduling schemes. In modeling
the disk characteristics, we use the formulas in section 2 and parameters are retrieved from
a Seagate Wren 8 ST41650N disk. Head switching time(time to change head to the another
time to cross tracks and rotational latency are considered for
the simulation. Star-wars MPEG I trace data (frame size data) [23] and Red's Nightmare
MPEG I trace data are used to produce the workload. To generate different video streams,
we choose one type of trace data and generate two random numbers between 0 and 1. The
smaller generated number is used to indicate the starting point of the stream and the larger is
used to indicate the end point. For example, assume that the Star-wars data is selected and
the random numbers 0.2 and 0.5 are generated. If Star-wars consists of 1000 frames, then a
new video stream is constructed from the data between the 201st and 500th frames. These
video streams need 1.5 Mbps display data-rate (peak-rate), but actually the mean data-rate
of Star-wars is 670 Kbps and that of Red's Nightmare is 600 Kbps. More than 50%(in case
of Red's Nightmare more even 60%) of resources are wasted if we use CBR data modeling
(worst-case assumption). We have conducted the simulations with the traces from [22] but
the results show little differences. We used an Ultra Sparc 1 workstation running Solaris 2.5
for the simulation.
5.2 Experiment Method
In our experiment, we have compared the performance between the VBR scheme and the
CBR scheme. The VBR scheme employs the dynamic length of period and the CBR scheme
employs the static length of period. We used RR (Round Robin), SCAN, and GSS (Grouped
Sweeping Scheme) as the scheduling methods for the VBR scheme. RR and SCAN methods
were used for the CBR scheme. Since the difference between them was negligible, only the
results of the SCAN-CBR scheme are presented for simplicity. For each scheme, the average
number of streams accepted was used as the performance metric. The following abstract
mechanism was used for 1 million seconds to get the average number of accepted streams
for each scheme. Assume that there is at least one stream waiting for service in the FIFO
(first in first out) queue and that the system accepts as many streams as possible and services
them. If no more streams can be accepted, the time is passed to the next period until a new
stream is accepted. In some periods, certain streams may be over, and some streams may be
accepted. The mean number of accepted streams in a period is computed through executing
each scheme for a million seconds.
The admission control algorithm in section 4 is changed to evaluate the effect of static
time period on the performance. For a given time period T s (unchanged during a run), we
can get T min and T max . If any one of the 3 conditions holds, the stream can not be accepted.
1.
2.
3.
Since a stream can be accepted in the dynamic period length scheme, unless it meets condition
above, the dynamic scheme shows better performance.
5.3 Results
To evaluate the performance of the different admission control schemes, we have conducted
simulation with varying buffer size. Figure 4 shows the mean number of streams accepted. In
this figure, S-CBR means the CBR scheme with static period length, DV-RR means dynamic
period length VBR scheme with RR disk scheduling, and DV-GSS means dynamic period
length VBR scheme with GSS disk scheduling. The main conclusion that may be drawn
from the figure is that dynamic period length VBR schemes accept more than twice as many
streams as the CBR scheme does. While the playback data-rate (R c ) of a stream is given at
admission control time in the CBR scheme(by worst case assumption), it varies from period
to period in the VBR schemes. Since the SCAN scheme gets some gain in disk bandwidth,
but buffer utilization is poor while the RR scheme uses the buffer more efficiently, but much
more disk bandwidth is wasted, there is difference among the dynamic period length VBR
schemes. DV-GSS, with 5 groups, shows the best throughput among the dynamic VBR
schemes. However, the improvement is very small (at best, less than 3%).152535
Mean
Number
of
Accepted
Streams
Buffer Size (M Bytes)
DV-GSS with 5 groups
"DV-RR"
"DV-SCAN"
"S-CBR"

Figure

4: Average Number of Accepted Streams for Various Strategies
The major factor that affects the lower limit of period length (T min ) is the effective disk
bandwidth (as disk bandwidth increases, the lower limit decreases), and the major factor
which affects the upper limit of period length (T max ) is the effective buffer space (as buffer
space increases, the upper limit increases). Period length is also influenced strongly by the
sum of the data-rates of all active streams. Table 1 shows the average time periods for
various schemes. Since consumption rate does not vary with time in the S-CBR scheme, we
need only one calculation to determine the time period, and we can use the same period,
if no new streams are accepted. In the new dynamic VBR schemes, time periods may not
be constant, since we use dynamic period length. The DV-RR scheme tends to have longer
periods than the DV-SCAN scheme.
Even when we use the VBR characteristics for resource reservation, we cannot achieve
good performance if we also use a static time period (no changes in the length of period). If
we use a static time period, then the throughput varies with the length of the period (worse
Buffer Size S-CBR DV-RR DV-SCAN DV-GSS

Table

1: Average Period Length for Various Schemes - using "Star-wars Trace"
than the dynamic schemes in all cases). For example, with a fixed period of 2000 ms, SV-RR
(static period VBR scheme with RR scheduling) accepts streams, and SV-SCAN (static
period VBR scheme with SCAN scheduling) accepts 23 streams (using 16M buffer space),
while with a fixed period of 5000 ms, SV-RR accepts 26 streams, and SV-SCAN accepts 19
streams. It is obvious that if we use some value close to the average time period (as indicated
in

Table

1) for the fixed time period, then the throughput is reasonable, but otherwise it is
very poor.
In our algorithm, a new stream is rejected if at least one non-schedulable period exists
we decide that the time period is close to the optimal length, the
possibility of rejection is higher than with dynamic period schemes. Figure 5 shows the mean
number of maximum accepted streams using a static time period with a VBR scheme.
Since we use approximated values to obtain the length of the next period (T i+1 ), starvation
or overflow can occur. In our simulation, the starvation probability is less than 0.5% (one
starvation in 200 periods) and the overflow probability is less than 5%. When we reserve 5%
of buffer space, the probability of overflow becomes so minor(we observed no overflow in our
simulation). While 0.5% of starvation is acceptable, if we reserve 1% of disk bandwidth, then
the probability of starvation decreases almost to 0. Figure 6 shows the starvation probability
with varying spare resource(buffer) reservation. Even if we reserve 5% of resource, there is
only a 3% degradation in throughput. This means that dynamic VBR schemes still accept
twice the number of streams accepted by static CBR schemes.
Mean
Number
of
Accepted
Streams
Length of Period (Static Scheme) - unit : ms
"SV-SCAN"
"SV-GSS(g=2)"
"SV-GSS(g=5)"
"SV-RR"

Figure

5: Mean of Maximum Accepted Streams in Case of Static Period Length
Starvation
Probability
Reserved Buffer Space (%)

Figure

Starvation Probability with Varying Spare Resource Reservation
6 Conclusions
In this paper, we have presented an effective admission control scheme for VBR data, which
considers both buffer space and disk bandwidth. To compare the trade-offs among several
scheduling algorithms, we have derived the equations regarding the distance of head movement
in one seek for each scheduling algorithm and we have analyzed the buffer requirements for
those algorithms. Since most existing control mechanisms use a static period scheme, the
resources of the server tend to be wasted. If a static period length is far from optimal,
then the throughput decreases significantly. In a dynamic time-period scheme, the period is
changed dynamically, based upon the available disk bandwidth and the buffer space, so as to
maximize the throughput. Our experiments show that there is little difference in performance
among VBR schemes if we use dynamic periods. Although some spare resources are reserved
(5% of buffer and disk bandwidth) for starvation or overflow, VBR schemes can still support
twice as many streams as a CBR scheme and experience neither starvation nor overflow.
Our VBR-based scheme needs more calculation overhead than a CBR scheme, but if frame-
size data is merged by some unit (say, the summation of then the overhead will be
significantly reduced (to almost 1/30). The largest part of the calculation is the summation
of frame sizes. Since CPU performance is increasing faster than that of memory or disks,
optimizing memory utilization and disk bandwidth is becoming increasingly important.
We use a single disk model but disk arrays are currently used in many systems. If we
use a simple disk array configuration, in which data are perfectly striped on all the disks, the
entire collection of disks can be treated, logically, as a single disk unit and we can replace
disk bandwidth R with
i in disk array R i as in [10, 12]. We will extend our scheme in order
that more complicated disk arrays can be used.



--R

A file system for continuous media.
Effective memory use in a media server.
Storage allocation policies for time-dependent multimedia data
Principles of delay-sensitive multimedia data storage and retrieval
Multimedia storage servers: A tutorial and survey.
On configuring a single disk continuous media server.
Access path selection in databases with intelligent disc subsystems.
Stochastic service guarantees for continuous data on multi-zone disks
Maximizing buffer and disk utilization for news-on- demand
An analysis of buffer sharing and prefetching techniques for multimedia systems.
A tight upper bound of the lumped disk seek time for the SCAN disk scheduling policy.
Disk striping in video server environments.
Dynamic task scheduling in distributed real-time systems
Efficient storage techniques for digital continuous multime- dia
I/O issues in a multimedia system.
An introduction to disk drive modeling.
A dynamic buffer management technique for minimizing the necessary buffer space in a continuous media server.
A statistical admission control algorithm for multimedia servers.
Scheduling algorithms for modern disk derives.

Design and analysis of a grouped sweeping scheme for multimedia data.
ftp://ftp.
--TR
Access path selection in databases with intelligent disc subsystems
Principles of delay-sensitive multimedia data storage retrieval
A file system for continuous media
An introduction to disk drive modeling
I/O issues in a multimedia system
Scheduling algorithms for modern disk drives
A statistical admission control algorithm for multimedia servers
A tight upper bound of the lumped disk seek time for the Scan disk scheduling policy
On configuring a single disk continuous media server
An analysis of buffer sharing and prefetching techniques for multimedia systems
Stochastic service guarantees for continuous data on multi-zone disks
Multimedia Storage Servers
Storage Allocation Policies for Time-Dependent Multimedia Data
Efficient Storage Techniques for Digital Continuous Multimedia
Effective Memory Use in a Media Server
Maximizing Buffer and Disk Utilizations for News On-Demand
Mon-Song Chen, Dilip D. Kandlur
Disk striping in video server environments
Consumption-Based Buffer Management for Maximizing System Throughput of a Multimedia System
A Dynamic Buffer Management Technique for Minimizing the Necessary Buffer Space in a Continuous Media Server

--CTR
Roger Zimmermann , Kun Fu, Comprehensive statistical admission control for streaming media servers, Proceedings of the eleventh ACM international conference on Multimedia, November 02-08, 2003, Berkeley, CA, USA
Jin B. Kwon , Heon Y. Yeom, Generalized data retrieval for pyramid-based periodic broadcasting of videos, Future Generation Computer Systems, v.20 n.1, p.157-170, January 2004
