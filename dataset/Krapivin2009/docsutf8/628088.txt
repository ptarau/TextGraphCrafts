--T
A Database Approach for Modeling and Querying Video Data.
--A
AbstractIndexing video data is essential for providing content-based access. In this paper, we consider how database technology can offer an integrated framework for modeling and querying video data. As many concerns in video (e.g., modeling and querying) are also found in databases, databases provide an interesting angle to attack many of the problems. From a video applications perspective, database systems provide a nice basis for future video systems. More generally, database research will provide solutions to many video issues, even if these are partial or fragmented. From a database perspective, video applications provide beautiful challenges. Next generation database systems will need to provide support for multimedia data (e.g., image, video, audio). These data types require new techniques for their management (i.e., storing, modeling, querying, etc.). Hence, new solutions are significant. This paper develops a data model and a rule-based query language for video content-based indexing and retrieval. The data model is designed around the object and constraint paradigms. A video sequence is split into a set of fragments. Each fragment can be analyzed to extract the information (symbolic descriptions) of interest that can be put into a database. This database can then be searched to find information of interest. Two types of information are considered: 1) the entities (objects) of interest in the domain of a video sequence, and 2) video frames which contain these entities. To represent this information, our data model allows facts as well as objects and constraints. The model consists of two layers: 1) Feature & Content Layer (or Audiovisual Layer), intended to contain video visual features such as colors, contours, etc., 2) Semantic Layer, which provides the (conceptual) content dimension of videos. We present a declarative, rule-based, constraint query language that can be used to infer relationships about information represented in the model. Queries can refer to the form dimension (i.e., information of the Feature & Content Layer), to the content dimension (i.e., information of the Semantic Layer), or to both. A program of the language is a rule-based system formalizing our knowledge of a video target application and it can also be considered as a (deductive) video database on its own right. The language has both a clear declarative and operational semantics.
--B
Introduction
With recent progress in compression technology, it is
possible for computer to store huge amount of pictures, audio
and even video. If such media are widely used in today's
communication (e.g., in the form of home movies, education
and training, scholarly research, and corporate enterprise
solutions), efficient computer exploitation is still lack-
ing. Many databases should be created to face the increasing
development of advanced applications, such as video
on demand, video/visual/multimedia databases, monitoring,
virtual reality, internet video, interactive TV, video conferencing
and video email, etc. Though only a partial list, these
advanced applications need to integrate video data for complex
manipulations.
Video analysis and content retrieval based on semantics
require multi-disciplinary research effort in areas such
as computer vision, image processing, data compression,
databases, information systems, etc. (see [26]). Therefore,
video data management poses special challenges which
call for new techniques allowing an easy development of
applications. Facilities should be available for users to
view video material in a non-sequential manner, to navigate
through sequences, to build new sequences from oth-
ers, etc. To facilitate retrieval, all useful semantic objects
and their features appearing in the video must be appropriately
indexed. The use of keywords or free text [28] to describe
the necessary semantic objects is not sufficient [9].
Additional techniques are needed. As stated in [9], the issues
that need to be addressed are: (1) the representation
of video information in a form that facilitates retrieval and
interaction, (2) the organization of this information for efficient
manipulation, and (3) the user-friendly presentation
of the retrieved video sequences. Being able to derive an
adequate content description from a video, however, does
not guarantee a satisfactory retrieval effectiveness, it is only
a necessary condition to this end. It is mandatory the video
data model be powerful enough to allow both the expression
of sophisticated content representation and their proper usage
upon querying a video database. For example, the time-dependent
nature of video is of considerable importance in
developing adequate data models and query languages.
Many features of database systems seem desirable in a
video context: secondary storage management, persistence,
transactions, concurrency control, recovery, versions, etc.
In addition, a database support for video information will
help sharing information among applications and make it
available for analysis. The advantages (in general and for
video in particular [22, 15]) of database technology, such
as object-oriented databases, are (1) the ability to represent
complex data, and (2) more openness to the external
world (e.g., Web, Java, CORBA, languages bindings) than
traditional database systems. However, as existing database
technology is not designed to manage digital video as first
class media, new techniques are required for organizing,
storing, manipulating, retrieving by content, and automatic
processing and presentation of visual content. Although
some tools for video exploitation are available, their use
often amounts to displaying video in sequence, and most
modeling methods have been developed for specific needs.
In many cases, query languages concentrate on extraction
capabilities. Queries over video data are described only by
means of a set of pre-defined, ad hoc operators, often incorporated
to SQL, and are not investigated in theoretical
framework. One can argue that logic-based database query
languages appropriately designed to support video specific
features should form a sound basis for query languages.
From database point of view, video data presents an interesting
challenge. Future database systems must cover the
range of tasks associated with the management of video
content including feature extraction, indexing, querying,
and developing representation schemes and operators. For
example, the data model should be expressive enough to
capture several characteristics inherent to video data, such
as movements, shapes, variations, events, etc. The query
language should allow some kind of reasoning, to allow, for
example, virtual editing [19], and should be able to perform
exact as well as partial or fuzzy matching (see [4]).
Despite the consensus of the central role video databases
will play in the future, there is little research work on
finding semantic foundations for representing and querying
video information. This paper is a contribution in this direc-
tion. The framework presented here integrates formalisms
developed in constraint, object and sequence databases. We
propose a hybrid data model for video data and a declara-
tive, rule-based, constraint query language, that has a clear
declarative and operational semantics. We make the following
contributions:
1. We develop a simple video data model on the basis
of relation, object and constraint paradigms. Objects
of interest and relationships among objects can
be attached to a generalized interval 1 either through
attribute/value pairs or relations.
2. We propose a declarative, rule-based, constraint query
language that can be used to infer relationships from
information represented in the model, and to intentionally
specify relationships among objects. It allows a
high level specification of video data manipulations.
The model and the query language use the point-based
approach to represent periods of time associated with generalized
intervals. First-order queries can then be conveniently
asked in a much more declarative and natural way
[27]. There has been some previous research on the power
of constraints for the implicit specification of temporal data
[8].
The model and the query language will be used as a core
of a video document archive prototype by both a television
channel and a national audio-visual institute. To the best
of our knowledge, this is the first proposal of a formal
rule-based query language for querying video data.
Paper outline: This paper is organized as follows. Section
related work. Section 3 presents some useful
definitions. Section 4 formally introduces the video data
model. Section 5 describes the underlying query language.
Section 6 draws conclusions.
2. Related Work
With the advent of multimedia computers (PCs and
workstations), the world-wide web, and standard and powerful
compression techniques 2 , it becomes possible to digitize
and store common human media, such as pictures,
generalized interval is a set of pairwise non overlapping fragments
in a video sequence.
Such as MPEG-I [10] [11] and its successors.
sounds, and video streams worldwide. Nevertheless, storing
is the minimal function we are to expect from a com-
puter, its power should also be aimed at content indexing
and retrieval. Two main approaches have been experi-
enced: fully automated content indexing approach, and the
approach based on human-machine interaction. Some fully
automated research systems have been developed, among
others, VIOLONE [29] and JACOB [18]. However, because
of the weakness of content analysis algorithms, they focus
on a very specific exploitation. On the other hand, much
more aided video content indexing systems have been de-
signed, among others, OVID [22], AVIS [1], or VideoStar
[14].
In the context of image and video data, queries can be
formulated using several techniques, which fall broadly into
two categories: textual and visual. Several systems have
been developed to retrieve visual data based on color, shape,
size, texture, image segments, keyword, relational opera-
tors, objects, and bibliographic data (see, among others,
[6, 7, 13, 16, 21]). In this paper, we focus on textual languages

The work presented here is closest to and complements
the ones in [20, 1, 22, 14].
Meghini [20] proposed a retrieval model for images
based on first-order logical language which spans along
four main dimensions: visual, spatial, mapping and content.
Queries on images can address anyone of these dimensions
or any combination of them. In the proposed model, objects
cannot be characterized by attributes. Every entity is
described by means of relations (predicates). For example,
objects' shapes cannot be stated in a declarative and equational
manner, as it is the case in our model.
Oomoto and Tanaka [22] proposed a schema-less video-object
data model. They focus on the capabilities of object-oriented
database features (their extension) for supporting
schema evolution and to provide a mechanism for sharing
some descriptive data. A video frame sequence is modeled
as an object with attributes and attribute values to describe
its contents. A semantically meaningful scene is a sequence
of (not always continuous) video frames. An interval is described
by a pair of a starting frame and an ending frame. It
denotes a continuous sequence of video frames. They introduced
the notion of inheritance based on the interval inclusion
relationship. By means of this notion different video-
objects may share descriptional data. Several operations,
such as interval projection, merge and overlap are defined
to compose new objects from other objects. They provide
the user with the SQL-based query language VideoSQL for
retrieving video-objects. This model does not allow the
description and the definition of relationships among objects
within a video-object. The content of a video-object is
described in terms of attribute-values of this video-object.
Semantic objects are considered as values of attributes of
video-objects.
Adali et al. [1] have developed a formal video data
model, and they exploit spatial data structures for storing
such data. They emphasized some kinds of human-level information
in video: objects of interest, activities, events and
roles. A given video is divided into a sequence of frames
which constitute logical divisions of the video. Associated
with each object/event is a set of frame-sequences. Each
frame sequence can be viewed as a frame segment. Events
are characterized by a set of attributes describing their con-
text. For example, the event give party may be characterized
by the multi-valued attribute host whose values are
Philip and Brandon and the attribute guest whose value is
Rupert. In this framework, objects other than events have
no complex structure. The only relationships among objects
are those given implicitly through the description of
events. They also developed a simple SQL-like video query
language which can be used to retrieve videos of interest
and extracts from them the relevant segments of the video
that satisfy the specified query conditions.
These two proposals provide an interval-based approach
to represent the periods of time associated with frames of
interest in a video sequence.
Hjelsvold and Midtstraum [14] proposed a generic
video data model. Their proposal combines ideas from
the stratification [2] and the segmentation [9] approaches.
The objective is to develop a framework where structuring,
annotations, sharing and reuse of video data become
possible. Their model is built upon an enhanced-ER model.
A simple SQL-like video query language with temporal
interval operators (e.g., equals, before, etc.) is provided.
This work concentrates on the structural part of a video
in order to support video browsing. Thematic indexing is
based on annotations, which give a textual description of
the content of frame sequences. In contrast, we allow a
more elaborated and structured description of the content
of frame sequences.
With regard to the modeling, we extended these works by
allowing the description of the contents of video sequences
by means of first class citizen objects of the data model and
by relating them to each others either through attributes or
through explicit relation names, leading to more expressive
relationships to link objects. Hence, video frames (which
we call generalized intervals) as well as semantic objects
(objects of interest in a generalized interval) are modeled
and manipulated at the same level. Special queries, like
spatial and temporal ones, can be expressed in a much more
declarative manner. Generalized intervals, as well as semantic
objects and relationships among these elements can
be described, making a video sequence appropriate for different
applications.
3. Basic Definitions
This section provides the preliminary concepts that will
be used to design the video data model and the underlying
rule-based, constraint query language.
ffl the domain dom(D),
ffl a set of predicate symbols pred(D), where each predicate
pred(D) is associated with an arity
n and an n-ary relation P D ' dom(D) n ,
An example of a concrete domain is the set of (nonnega-
tive) integers with comparisons (=; !; -; ?).
In the following, we assume entailment of conjunctions
or disjunctions over pred(D) is decidable.
(Dense Linear Order Inequality Con-
straints) Dense order inequality constraints are all formulas
of the form x'y and x'c, where x, y are variables, c
is a constant, and ' is one of =; !; - (or their negation
We assume that these constants are interpreted
over a countably infinite set D with a binary relation which
is a dense order. Constants, =, !, and - are interpreted
respectively as elements, equality, the dense order, and the
irreflexive dense order of the concrete domain D.
Complex constraints are built from primitive (atomic)
constraints by using logical connectives. We use the special
symbol, ), to denote the entailment between constraints,
that is, if c 1
and c 2
are two constraints, we
only if the
constraint c 1 - :c 2 is unsatisfiable.
Techniques for checking satisfiability and entailment for
order constraints over various domains have been studied.
Regarding expressive power and complexity of linear constraint
query languages, see [12].
Definition 3 (Set-Order Constraints) Let D be a domain.
A set-order constraint is one of the following types:
Y
where c is a constant of type D, s is a set of constants of type
D, and e
Y denote set variables that range over finite sets
of elements of type D.
Our set-order constraints are a restricted form of set constraints
involving 2, ', and ', but no set functions such
as [ and ".
Note that the constraint c 2 e
X is a derived form since it
can be rewritten as fcg ' e
X.
Satisfaction and entailment of conjunctions of set-order
constraints can be solved in polynomial-time using a quantifier
elimination algorithm given in [25].
This class of constraints play an important role in declaratively
constraining query answers.
Definition 4 (Time Interval) An interval i is considered
as an ordered pair of real numbers This
definition refers to the predicate - of the concrete domain
IR. If t is a time variable, then an interval can be
represented by the conjunction of the two primitive dense
linear order inequality constraints x 1 - t and t - x 2 .
Definition 5 (Generalized Time Interval) A generalized
time interval, or simply a generalized interval, is a set of
non overlapping intervals. Formally, a generalized
time interval can be represented as a disjunction of time
intervals.
4. Video Data Model
To naturally capture the entities and relationships among
entities within a video sequence, we resort to the following
basic paradigms:
ffl Objects and object identity Objects are entities of interest
in a video sequence. In our model, we refer
to objects via their logical object identities, which are
nothing but syntactic terms in the query language. Any
logical oid uniquely identifies an object. In this paper,
we will be using the word "object identity" (or even
"object") to refer to ids at logical level. We have essentially
two types of objects: (1) generalized interval
objects, which are abstract objects resulting from
splitting a given video sequence into a set of smaller
sequences; (2) semantic objects which are entities of
interest in a given video sequence.
Attributes Objects are described via attributes. If an
attribute is defined for a given object, then it also has a
value for that object.
ffl Relations It has been argued many times that objects
do not always model real world in the most natural
way, and there are situations when the use of relations
combined with objects leads to more natural represen-
tation. Although relations can be encoded as objects,
this is not the most natural way of handling relations
and so we prefer to have relations as first-class language
constructs.
We assume the existence of the following countably infinite
and pairwise disjoint sets of atomic elements:
ffl relation names
ffl attributes
ffl (atomic) constants
object identities or oid's :g. In the
following, we distinguish between object identities for
entities and object identities for generalized intervals.
Furthermore, in order to be able to associate a time interval
to a generalized interval object, we allow a restricted
form of dense linear order inequality constraints to be values
of attributes. We define the set ~
C whose elements are:
Primitive (atomic) constraints of the form t'c where t
is a variable, c is a constant, and ' is one of !; =; ?;
ffl conjunctions, and disjunctions of primitive constraints.
Definition 6 (value) The set of values is the smallest set
containing D[ID[ ~
C and such that, if
are values, then so is fv g.
Definition 7 (Video Object) A video object (denoted v-
object) consists of a pair (oid; v) where:
ffl oid is an object identifier which is an element of ID;
ffl v is an m-tuple
are distinct attribute names in A and v i
are values.
then attr(o) denotes the set of all attributes in v (i.e.
An g), and value(o) denotes the value v, that is,
value(o). The value v i is denoted by o:A i .
5. Rule-Based, Constraint Query Language
In this section, we present the declarative, rule-based
query language that can be used to reason with facts and
objects in our video data model. The language consists of
two constraint languages on top of which relations can be
defined by means of definite clauses.
This language has a model-theoretic and fix-point semantics
based on the notion of extended active domain of
a database. The extended domain contains all generalized
interval objects and their concatenations. The language has
an interpreted function symbol for building new generalized
intervals from others (by concatenating them). A constructive
term has the form I
I 2 and is interpreted as the concatenation
of the two generalized intervals I 1 and I 2 .
The extended active domain is not fixed during query
evaluation. Instead, whenever a new generalized interval
object is created (by the concatenation
operator,\Omega ), the new
object and the ones resulting from its concatenation with
already existing ones are added to the extended active domain

5.1. Syntax
To manipulate generalized intervals, our language has
an interpreted function symbol for constructing 3 complex
term. Intuitively, if I 1 and I 2 are generalized intervals, then
I
1\Omega I 2 denotes the concatenation of I 1 and I 2 .
The language of terms uses three countable, disjoint sets:
1. A set D of constant symbols. This set is the union of
three disjoint sets:
set of atomic values,
set of entities, also called object entities,
set of generalized interval objects.
2. A set V of variables called object and value variables,
and denoted by
3. A set ~
V of variables called generalized interval vari-
ables, and denoted by
If I 1 and I 2 denote generalized interval objects, generalized
interval variables, or constructive interval terms, then I
is a constructive interval term.
In the following, the concatenation operator is supposed
to be defined on D 3 , that is 8e
The structure of the resulting element
defined
from the structure of e 1 and e 2 as follows:
such
Here we follow the idea of [17] that
the object id of the object generated from e 1 and e 2
should be a function of id 1 and id 2 .
Note that I
This means that if I is obtained
from the concatenation of I 1 and I 2 , then the result of the
concatenation of I with I 1 or I 2 is I . This leads to the
termination of the execution of constructive rules (see below
the definition of constructive rule).
Definition 8 (Predicate symbol) We define the following
predicate symbols:
3 For concatenating generalized intervals.
ffl each P 2 R with arity n is associated with a predicate
symbol P of arity n,
ffl a special unary predicate symbol Interval. It can be
seen as the class of all generalized interval objects.
ffl a special unary predicate symbol Object. It can be
seen as the class of all objects other than generalized
interval objects.
Definition 9 (Atom) If P is an n-ary predicate symbol
are terms, then P(t is an atom.
If O and O 0 denote objects or object variables, Att and
Att 0 are attribute names, and c is a constant value, then
O:Att'c and O:Att ' O 0 :Att 0 where ' is one of =; !; -
(or their negation 6=; -; ?) are called inequality atoms.
rule in our language has the form:
where H is an atom, n; m - 0, are (positive)
literals, and c are constraints.
Optionally, a rule can be named as above, using the prefix
r is a constant symbol. We refer to A as
the head of the rule and refer to L
the body of the rule.
Note that we impose the restriction that constructive
terms appear only in the head of a rule, and not in the body.
A rule that contains a constructive term in its head is called
a constructive rule.
Recall that we are interested in using order constraints,
that is arithmetic constraints involving !; ?, but no arithmetic
functions such as +; \Gamma;  , and set-order constraints,
a restricted form of set constraints involving 2; ', and ',
but no set functions such as [ and ".
Definition 11 (Range-restricted Rule) A rule r is said to
be range-restricted if every variable in the rule occurs in
a body literal. Thus, every variable occurring in the head
occurs in a body literal.
Definition 12 (Program) A program is a collection of
range-restricted rules.
query is of the form:
where q is referred to as the query predicate, and -
s is a tuple
of constants and variables.
Example Let us give some simple examples of queries.
In the following, uppercase letters stand for variables and
lowercase letters stand for constants.
The query "list the objects appearing in the domain of a
given sequence g" can be expressed by the following rule:
In this example, g is a constant and O is the output vari-
able. Here, we suppose that for a given generalized interval,
the set-valued attribute "entities" gives the set of semantic
objects of interest in that generalized interval. This query
involves an atomic (primitive) constraint. To compute the
answer set to the query, we need to check the satisfiability
of the constraint O 2 g:entities after O being instantiated.
The query "list all generalized Intervals where the object
appears" can be expressed as:
G:entities
The query "does the object o appear in the domain of a
given temporal frame [a; b]" can be expressed as:
G:duration
where t is a temporal variable. This query involves one
primitive constraint G:entities, and a complex arithmetic
constraint G:duration To compute
the answer set to the query, we need to check satisfiability
of these two constraints.
The query "list all generalized intervals where the objects
appear together" can be expressed as:
G:entities
or equivalently by:
G:entities
The query "list all pairs of objects, together with their
corresponding generalized interval, such that the two
objects are in the relation "Rel" within the generalized
interval", can be expressed as:
The query "find the generalized intervals containing an object
O whose value for the attribute A is val" can be expressed
as:
5.2. Inferring new relationships
Rules can be used to infer (specify) new relationships,
as facts, between existing objects.
Example Suppose we want to define the relation contains,
which holds for two generalized interval objects G 1 and G 2
if the time interval associated with G 1 overlaps the time interval
associated with G 2 . This can be expressed as follows:
G 1 and G 2 are in the relation contains if the constraint
(duration-f iller) associated with G 2 entails the one
associated with G 1 .
If we want to define the relation same-object-in of all
pairs of generalized intervals with their common objects,
we write the following rule:
O 2 G1 :entities; O 2 G2 :entities
The following rule constructs concatenations of generalized
intervals that have some objects, say
Gintervals(G1\Omega G2) /
Our language has a declarative model-theoretic and an
equivalent fix-point semantics.
For Datalog with set order constraints, queries are shown
to be evaluable bottom-up in closed form and to have
DEXPTIME-complete data complexity [24]. For a rule
language with arithmetic order constraints, the answer to
a query can be computed in PTIME data complexity [25].
As a consequence, we obtain a lower bound complexity for
query evaluation in our rule based query language.
6. Conclusion and Future Work
There is a growing interest in video databases. We believe
that theoretical settings will help understanding related
modeling and querying problems. This will lead to the development
of powerful systems for managing and exploiting
video information.
In this paper, we have addressed the problem of developing
a video data model and a formal, rule-based, constraint
query language that allow the definition and the retrieval
by content of video data. The primary motivation of
this work was that objects and time intervals are relevant
in video modeling and the absence of suitable supports for
these structures in traditional data models and query languages
represent a serious obstacle.
The data model and the query language allow (a) an abstract
representation of the visual appearance of a video able
to support modeling and retrieval techniques; (b) a semantic
data modeling styled representation of the video content,
independent from how the content information is obtained;
(c) a relational representation of the association between objects
within a video sequence.
This paper makes the following contributions. (1) We
have developed a simple and useful video data model that
integrates relations, objects and constraints. Objects allow
to maintain an object-centered view inherent to video data.
Attributes and relations allow to capture relationships between
objects. It simplifies the indexing of video sequences.
(2) We have developed a declarative, rule-based, constraint
query language to reason about objects and facts, and to
build new sequences from others. This functionality can
be useful in virtual editing for some applications. The language
provides a much more declarative and natural way to
express queries.
Due to the complex nature of video queries, the query
language presents a facility that allows a user to construct
queries based on previous queries. In addition, as all properties
inherent to image data are also part of video data, the
framework presented here naturally applies to image data.
There are many interesting directions to pursue.
ffl An important direction of active research is to extend
our framework to incorporate abstraction mechanisms
such as classification, aggregation, and generalization.
ffl Another important direction is to study the problem of
sequence presentation. Most existing research systems
use template-based approach [3] to provide the automatic
sequencing capability. With this approach, a set
of sequencing templates is predefined to confine the
user's exploration to a certain sequencing order. The
problem is that this approach is domain-dependent and
relies on the availability of a suitable template for a
particular query. We believe that a framework based on
declarative graphical (visual) languages [23] will offer
more possibilities and flexibility in the specification of
sequence presentations.
We are investigating these important research directions.



--R



Parsing movies in context.
Video query formu- lation
Solving systems of set constraints (extended abstract).
A three-dimensional iconic environment for image database query- ing
Picture query languages for pictorial data-base systems
Relational specifications of infinite query answers.
A video retrieval and sequencing system.
Mpeg: a video compression standard for multi-media applications
The mpeg compression algorithm: a review.
Linear constraint query languages expressive power and complexity.
Query by visual example.
Modelling and querying video data.
An experimental video database management system based on advanced object-oriented techniques
A high level query language for pictorial database management.
A logic for object-oriented logic programming (maier's o-logic revisited). In Proceedings of the 1989 Symposium on Principles of Database Systems (PODS'89)
Just a content-based query system for video databases
Virtual video editing in interactive multimedia applications.
Towards a logical reconstruction of image re- trieval
The qbic project: Querying images by content using color
Design and implementation of a video-object database system
A declarative graphical query languages.
queries of set constraint databases.
Constraint objects.
Special issue in video information systems.
Point vs. interval-based query languages for temporal databases
Video handling based on structured information for hypermedia systems.
Video retrieval by motion exam- ple
--TR

--CTR
Timothy C. Hoad , Justin Zobel, Fast video matching with signature alignment, Proceedings of the 5th ACM SIGMM international workshop on Multimedia information retrieval, November 07-07, 2003, Berkeley, California
Chrisa Tsinaraki , Panagiotis Polydoros , Fotis Kazasis , Stavros Christodoulakis, Ontology-Based Semantic Indexing for MPEG-7 and TV-Anytime Audiovisual Content, Multimedia Tools and Applications, v.26 n.3, p.299-325, August    2005
Mehmet Emin Dnderler , Ediz aykol , Umut Arslan , zgr Ulusoy , Uur Gdkbay, BilVideo: Design and Implementation of a Video Database Management System, Multimedia Tools and Applications, v.27 n.1, p.79-104, September 2005
Rokia Missaoui , Roman M. Palenichka, Effective image and video mining: an overview of model-based approaches, Proceedings of the 6th international workshop on Multimedia data mining: mining integrated media and complex data, p.43-52, August 21-21, 2005, Chicago, Illinois
Elisa Bertino , Mohand-Sad Hacid , Farouk Toumani, Retrieval of semistructured Web data, Intelligent exploration of the web, Physica-Verlag GmbH, Heidelberg, Germany,
Mohand-Sad Hacid , Farouk Toumani , Ahmed K. Elmagarmid, Constraint-Based Approach to Semistructured Data, Fundamenta Informaticae, v.47 n.1-2, p.53-73, January 2001
Elisa Bertino , Ahmed K. Elmagarmid , Mohand-Sad Hacid, Ordering and Path Constraints over Semistructured Data, Journal of Intelligent Information Systems, v.20 n.2, p.181-206, March
