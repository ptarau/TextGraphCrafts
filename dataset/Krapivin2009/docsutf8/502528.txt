--T
Data mining with sparse grids using simplicial basis functions.
--A
Recently we presented a new approach [18] to the classification problem arising in data mining. It is based on the regularization network approach but, in contrast to other methods which employ ansatz functions associated to data points, we use a grid in the usually high-dimensional feature space for the minimization process. To cope with the curse of dimensionality, we employ sparse grids [49]. Thus, only O(hn-1nd-1) instead of O(hn-d) grid points and unknowns are involved. Here d denotes the dimension of the feature space and gives the mesh size. We use the sparse grid combination technique [28] where the classification problem is discretized and solved on a sequence of conventional grids with uniform mesh sizes in each dimension. The sparse grid solution is then obtained by linear combination. In contrast to our former work, where d-linear functions were used, we now apply linear basis functions based on a simplicial discretization. This allows to handle more dimensions and the algorithm needs less operations per data point.We describe the sparse grid combination technique for the classification problem, give implementational details and discuss the complexity of the algorithm. It turns out that the method scales linearly with the number of given data points. Finally we report on the quality of the classifier built by our new method on data sets with up to 10 dimensions. It turns out that our new method achieves correctness rates which are competitive to that of the best existing methods.
--B
INTRODUCTION
Data mining is the process of nding patterns, relations
and trends in large data sets. Examples range from scien-
tic applications like the post-processing of data in medicine
or the evaluation of satellite pictures to nancial and commercial
applications, e.g. the assessment of credit risks or
the selection of customers for advertising campaign letters.
For an overview on data mining and its various tasks and
approaches see [5, 12].
In this paper we consider the classication problem arising
in data mining. Given is a set of data points in a d-dimensional
feature space together with a class label. From
this data, a classier must be constructed which allows to
predict the class of any newly given data point for future decision
making. Widely used approaches are, besides others,
decision tree induction, rule learning, adaptive multivariate
regression splines, neural networks, and support vector
machines. Interestingly, some of these techniques can be interpreted
in the framework of regularization networks [21].
This approach allows a direct description of the most important
neural networks and it also allows for an equivalent
description of support vector machines and n-term approximation
schemes [20]. Here, the classication of data is interpreted
as a scattered data approximation problem with
certain additional regularization terms in high-dimensional
spaces.
In [18] we presented a new approach to the classication
problem. It is also based on the regularization network approach
but, in contrast to the other methods which employ
mostly global ansatz functions associated to data points, we
use an independent grid with associated local ansatz functions
in the minimization process. This is similar to the
numerical treatment of partial dierential equations. Here,
a uniform grid would result in O(h d
denotes the dimension of the feature space and
gives the mesh size. Therefore the complexity of the problem
would grow exponentially with d and we encounter the curse
of dimensionality. This is probably the reason why conventional
grid-based techniques are not used in data mining up
to now.
However, there is the so-called sparse grids approach which
allows to cope with the complexity of the problem to some
extent. This method has been originally developed for the
solution of partial dierential equations [2, 8, 28, 49] and
is now used successfully also for integral equations [14, 27],
interpolation and approximation [3, 26, 39, 42], eigenvalue
problems [16] and integration problems [19]. In the information
based complexity community it is also known as 'hyper-
bolic cross points' and the idea can even be traced back to
[41]. For a d-dimensional problem, the sparse grid approach
employs only O(h 1
points in the dis-
cretization. The accuracy of the approximation however is
nearly as good as for the conventional full grid methods, provided
that certain additional smoothness requirements are
fullled. Thus a sparse grid discretization method can be
employed also for higher-dimensional problems. The curse
of the dimensionality of conventional 'full' grid methods affects
sparse grids much less.
In this paper, we apply the sparse grid combination technique
[28] to the classication problem. For that the regularization
network problem is discretized and solved on a
certain sequence of conventional grids with uniform mesh
sizes in each coordinate direction. In contrast to [18], where
d-linear functions stemming from a tensor-product approach
were used, we now apply linear basis functions based on a
simplicial discretization. In comparison, this approach allows
the processing of more dimensions and needs less operations
per data point. The sparse grid solution is then
obtained from the solutions on the dierent grids by linear
combination. Thus the classier is build on sparse grid
points and not on data points. A discussion of the complexity
of the method gives that the method scales linearly
with the number of instances, i.e. the amount of data to be
classied. Therefore, our method is well suited for realistic
data mining applications where the dimension of the feature
space is moderately high (e.g. after some preprocessing
steps) but the amount of data is very large. Furthermore
the quality of the classier build by our new method seems
to be very good. Here we consider standard test problems
from the UCI repository and problems with huge synthetical
data sets in up to 10 dimensions. It turns out that our new
method achieves correctness rates which are competitive to
those of the best existing methods. Note that the combination
method is simple to use and can be parallelized in a
natural and straightforward way.
The remainder of this paper is organized as follows: In
Section 2 we describe the classication problem in the frame-work
of regularization networks as minimization of a (qua-
dratic) functional. We then discretize the feature space and
derive the associated linear problem. Here we focus on grid-based
discretization techniques. Then, we introduce the
sparse grid combination technique for the classication problem
and discuss its properties. Furthermore, we present a
new variant based on a discretization by simplices and discuss
complexity aspects. Section 3 presents the results of
numerical experiments conducted with the sparse grid combination
method, demonstrates the quality of the classier
build by our new method and compares the results with
the ones from [18] and with the ones obtained with dierent
forms of SVMs [33]. Some nal remarks conclude the paper.
2. THE PROBLEM
Classication of data can be interpreted as traditional
scattered data approximation problem with certain additional
regularization terms. In contrast to conventional scattered
data approximation applications, we now encounter
quite high-dimensional spaces. To this end, the approach of
regularization networks [21] gives a good framework. This
approach allows a direct description of the most important
neural networks and it also allows for an equivalent description
of support vector machines and n-term approximation
schemes [20].
Consider the given set of already classied data (the training
d  Rg
Assume now that these data have been obtained by sampling
of an unknown function f which belongs to some function
space V dened over R d . The sampling process was disturbed
by noise. The aim is now to recover the function f
from the given data as good as possible. This is clearly an
ill-posed problem since there are innitely many solutions
possible. To get a well-posed, uniquely solvable problem we
have to assume further knowledge on f . To this end, regularization
theory [43, 47] imposes an additional smoothness
constraint on the solution of the approximation problem
and the regularization network approach considers the
variational problem
min f2V
with
Here, C(:; :) denotes an error cost function which measures
the interpolation error and (f) is a smoothness functional
which must be well dened for . The rst term enforces
closeness of f to the data, the second term enforces
smoothness of f and the regularization parameter  balances
these two terms. Typical examples are
and
2 with
with r denoting the gradient and  the Laplace operator.
The value of  can be chosen according to cross-validation
techniques [13, 22, 37, 44] or to some other principle, such as
structural risk minimization [45]. Note that we nd exactly
this type of formulation in the case scattered data
approximation methods, see [1, 31], where the regularization
term is usually physically motivated.
2.1 Discretization
We now restrict the problem to a nite dimensional sub-space
. The function f is then replaced by
Here the ansatz functions f' j g N
should span VN and preferably
should form a basis for VN . The coecients f j g N j=1
denote the degrees of freedom. Note that the restriction to
a suitably chosen nite-dimensional subspace involves some
additional regularization (regularization by discretization)
which depends on the choice of VN .
In the remainder of this paper, we restrict ourselves to the
choice
and
for some given linear operator P . This way we obtain from
the minimization problem a feasible linear system. We thus
have to minimize
with fN in the nite dimensional space VN . We plug (2)
into (4) and obtain after dierentiation with respect to k ,
@k
'k
This is equivalent to
In matrix notation we end up with the linear system
Here C is a square N  N matrix with entries C
is a rectangular N
M matrix with entries B
. The vector y contains the data labels y i and has
length M . The unknown vector  contains the degrees of
freedom  j and has length N .
Depending on the regularization operator we obtain different
minimization problems in VN . For example if we use
the gradient (fN
in the regularization expression
in (1) we obtain a Poisson problem with an additional
term which resembles the interpolation problem. The
natural boundary conditions for such a partial dierential
equation are Neumann conditions. The discretization (2)
gives us then the linear system (7) where C corresponds to
a discrete Laplacian. To obtain the classier fN we now
have to solve this system.
2.2 Grid based discrete approximation
Up to now we have not yet been specic what nite-
dimensional subspace VN and what type of basis functions
we want to use. In contrast to conventional data
mining approaches which work with ansatz functions associated
to data points we now use a certain grid in the attribute
space to determine the classier with the help of these grid
points. This is similar to the numerical treatment of partial
dierential equations.
For reasons of simplicity, here and in the the remainder of
this paper, we restrict ourself to the case x i= [0; 1] d .
This situation can always be reached by a proper rescaling
of the data space. A conventional nite element discretization
would now employ an equidistant
grid
n with mesh
size for each coordinate direction, where n is the
renement level. In the following we always use the gradient
in the regularization expression (3). Let j denote the
d . A nite element method with
piecewise d-linear, i.e. linear in each dimension, test- and
trial-functions  n;j (x) on
grid
now would give
n;j  n;j (x)
and the variational procedure (4) - (6) would result in the
discrete linear system
of size and matrix entries corresponding to (7).
Note that fn lives in the space
Vn := spanf n;j
The discrete problem (8) might in principle be treated by
an appropriate solver like the conjugate gradient method, a
multigrid method or some other suitable ecient iterative
method. However, this direct application of a nite element
discretization and the solution of the resulting linear system
by an appropriate solver is clearly not possible for a
d-dimensional problem if d is larger than four. The number
of grid points is of the order O(h d
the best case, the number of operations is of the same order.
Here we encounter the so-called curse of dimensionality: The
complexity of the problem grows exponentially with d. At
least for d > 4 and a reasonable value of n, the arising system
can not be stored and solved on even the largest parallel
computers today.
2.3 The sparse grid combination technique
Therefore we proceed as follows: We discretize and solve
the problem on a certain sequence of
grids
l
l 1 ;:::;l d
with uniform mesh sizes h in the t-th coordinate
direction. These grids may possess dierent mesh sizes for
dierent coordinate directions. To this end, we consider all
grids
l with
For the two-dimensional case, the grids needed in the combination
formula of level 4 are shown in Figure 1. The -
nite element approach with piecewise d-linear test- and trial-
functions
l;j (x) :=
d
Y
on
grid
l now would give
f l
l d
l;j  l;j (x)
and the variational procedure (4) - (6) would result in the
discrete system
l
with the matrices
M; and the unknown
vector d. We then solve these



c

Figure

1: Combination technique with level
two dimensions
problems by a feasible method. To this end we use here
a diagonally preconditioned conjugate gradient algorithm.
But also an appropriate multigrid method with partial semi-
coarsening can be applied. The discrete solutions f l are
contained in the spaces
of piecewise d-linear functions on
grid
l .
Note that all these problems are substantially reduced in
size in comparison to (8). Instead of one problem with size
nd ), we now have to deal with
problems of size dim(V l
Moreover, all these problems can be solved independently,
which allows for a straightforward parallelization on a coarse
grain level, see [23]. There is also a simple but eective static
load balancing strategy available [25].
Finally we linearly combine the results f l
l;j  l;j (x); from the dierent
grids
l as follows:
f (c)

The resulting function f (c)
n lives in the sparse grid space
This space has dim(V
It is
spanned by a piecewise d-linear hierarchical tensor product
basis, see [8].
Note that the summation of the discrete functions from
dierent spaces V l in (13) involves d-linear interpolation
which resembles just the transformation to a representation
in the hierarchical basis. For details see [24, 28, 29]. However
we never explicitly assemble the function f (c)
but keep
instead the solutions f l on the dierent
grids
l which arise
in the combination formula. Now, any linear operation F
on f (c)
can easily be expressed by means of the combination

Figure

2: Two-dimensional sparse grid (left) and
three-dimensional sparse grid
acting directly on the functions f l , i.e.
F(f (c)

l 1 +:::+l d =n+(d 1) q
F(f l
Therefore, if we now want to evaluate a newly given set
of data points f ~
(the test or evaluation set) by
~
we just form the combination of the associated values for f l
according to (13). The evaluation of the dierent f l in the
test points can be done completely in parallel, their summation
needs basically an all-reduce/gather operation.
For second order elliptic PDE model problems, it was
proven that the combination solution f (c)
n is almost as accurate
as the full grid solution fn , i.e. the discretization error
jje (c)
provided that a slightly stronger smoothness requirement
on f than for the full grid approach holds. We need the
seminorm
1
to be bounded. Furthermore, a series expansion of the error
is necessary for the combination technique. Its existence was
shown for PDE model problems in [10].
The combination technique is only one of the various methods
to solve problems on sparse grids. Note that there exist
also nite dierence [24, 38] and Galerkin nite element approaches
[2, 8, 9] which work directly in the hierarchical
product basis on the sparse grid. But the combination technique
is conceptually much simpler and easier to implement.
Moreover it allows to reuse standard solvers for its dierent
subproblems and is straightforwardly parallelizable.
2.4 Simplicial basis functions
So far we only mentioned d-linear basis functions based on
a tensor-product approach, this case was presented in detail
in [18]. But on the grids of the combination technique linear
basis functions based on a simplicial discretization are also
possible. For that we use the so-called Kuhn's triangulation
[15, 32] for each rectangular block, see Figure 3. Now, the
summation of the discrete functions for the dierent spaces
l in (13) only involves linear interpolation.

Table

1: Complexities of the storage, the assembly and the matrix-vector multiplication for the dierent
matrices arising in the combination method on one
grid
l for both discretization approaches. C l and G l can
be stored together in one matrix structure.
d-linear basis functions linear basis functions
l B l
storage O(3 d  N) O(3 d  N) O(2 d  M) O((2  d
assembly O(3 d  N) O(d  2 2d  M) O(d  2 d  M) O((2  d
mv-multiplication O(3 d  N) O(3 d  N) O(2 d  M) O((2  d

Figure

3: Kuhn's triangulation of a three-dimensional
unit cube
The theroetical properties of this variant of the sparse grid
technique still has to be investigated in more detail. However
the results which are presented in section 3 warrant its
use. We see, if at all, just slightly worse results with linear
basis functions than with d-linear basis functions and we
believe that our new approach results in the same approximation
order.
Since in our new variant of the combination technique the
overlap of supports, i.e. the regions where two basis functions
are both non-zero, is greatly reduced due to the use of a
simplicial discretization, the complexities scale signicantly
better. This concerns both the costs of the assembly and
the storage of the non-zero entries of the sparsely populated
matrices from (8), see Table 1. Note that for general operators
P the complexities for C l scale with O(2 d  N ). But for
our choice of zero-entries arise, which need
not to be considered, and which further reduce the complex-
ities, see Table 1 (right), column C l . The actual iterative
solution process (by a diagonally preconditioned conjugate
gradient method) scales independent of the number of data
points for both approaches.
Note however that both the storage and the run time
complexities still depend exponentially on the dimension d.
Presently, due to the limitations of the memory of modern
workstations (512 MByte - 2 GByte), we therefore can only
deal with the case d  8 for d-linear basis functions and
d  11 for linear basis functions. A decomposition of the
matrix entries over several computers in a parallel environment
would permit more dimensions.
3. NUMERICAL RESULTS
We now apply our approach to dierent test data sets.
Here we use both synthetical data and real data from practical
data mining applications. All the data sets are rescaled
to [0; 1] d . To evaluate our method we give the correctness
rates on testing data sets, if available, or the ten-fold cross-validation
results otherwise. For further details and a criti-
Figure

4: Spiral data set, sparse grid with level 5
(top left) to 8 (bottom right)
cal discussion on the evaluation of the quality of classica-
tion algorithms see [13, 37].
3.1 Two-dimensional problems
We rst consider synthetic two-dimensional problems with
small sets of data which correspond to certain structures.
3.1.1 Spiral
The rst example is the spiral data set, proposed by Alexis
Wieland of MITRE Corp [48]. Here, 194 data points describe
two intertwined spirals, see Figure 4. This is surely
an articial problem which does not appear in practical ap-
plications. However it serves as a hard test case for new
data mining algorithms. It is known that neural networks
can have severe problems with this data set and some neural
networks can not separate the two spirals at all [40].
In

Table

2 we give the correctness rates achieved with the
leave-one-out cross-validation method, i.e. a 194-fold cross-
validation. The best testing correctness was achieved on
level 8 with 89.18% in comparison to 77.20% in [40].
In

Figure

4 we show the corresponding results obtained
with our sparse grid combination method for the levels 5
to 8. With level 7 the two spirals are clearly detected and
resolved. Note that here 1281 grid points are contained in
the sparse grid. For level 8 (2817 sparse grid points) the
shape of the two reconstructed spirals gets smoother and

Table

3: Results for the Ripley data set
linear basis d-linear basis best possible %
level ten-fold test %  test data % test data % linear d-linear
9 87.7 0.0015 90.1 90.9 91.1 91.0
level  training correctness testing correctness
9 0.0006 100.00 % 88.14 %

Table

2: Leave-one-out cross-validation results for
the spiral data set
the reconstruction gets more precise.
3.1.2 Ripley
This data set, taken from [36], consists of 250 training
data and 1000 test points. The data set was generated synthetically
and is known to exhibit 8 % error. Thus no better
testing correctness than 92 % can be expected.
Since we now have training and testing data, we proceed
as follows: First we use the training set to determine the best
regularization parameter  per ten-fold cross-validation. The
best test correctness rate and the corresponding  are given
for dierent levels n in the rst two columns of Table 3.
With this  we then compute the sparse grid classier from
the 250 training data. The column three of Table 3 gives
the result of this classier on the (previously unknown) test
data set. We see that our method works well. Already level
4 is sucient to obtain results of 91.4 %. The reason is
surely the relative simplicity of the data, see Figure 5. Just
a few hyperplanes should be enough to separate the classes
quite properly. We also see that there is not much need
to use any higher levels, on the contrary there is even an
overtting eect visible in Figure 5.
In column 4 we show the results from [18], there we achieve
almost the same results with d-linear functions.
To see what kind of results could be possible with a more
sophisticated strategy for determing  we give in the last two
columns of Table 3 the testing correctness which is achieved
for the best possible . To this end we compute for all
(discrete) values of  the sparse grid classiers from the 250
data points and evaluate them on the test set. We then pick
the best result. We clearly see that there is not much of
a dierence. This indicates that the approach to determine
the value of  from the training set by cross-validation works
well. Again we have almost the same results with linear and
d-linear basis functions. Note that a testing correctness of

Figure

5: Ripley data set, combination technique
with linear basis functions. Left: level 4,
Right: level 8,
90.6 % and 91.1 % was achieved in [36] and [35], respectively,
for this data set.
3.2 6-dimensional problems
3.2.1 BUPA Liver
The BUPA Liver Disorders data set from Irvine Machine
Learning Database Repository [6] consists of 345 data points
with 6 features and a selector eld used to split the data
into 2 sets with 145 instances and 200 instances respectively.
Here we have no test data and therefore can only report our
ten-fold cross-validation results.
We compare with our d-linear results from [18] and with
the two best results from [33], the therein introduced smoothed
support vector machine (SSVM) and the classical support
vector machine (SVM jj:jj 2) [11, 46]. The results are given in

Table

4.
As expected, our sparse grid combination approach with
linear basis functions performs slightly worse than the d-
linear approach. The best test result was 69.60% on level
4. The new variant of the sparse grid combination technique
performs only slightly worse than the SSVM, whereas
the d-linear variant performs slighly better than the support
vector machines. Note that the results for other SVM approaches
like the support vector machine using the 1-norm
approach (SVM jj:jj 1
were reported to be somewhat worse
in [33].

Table

4: Results for the BUPA liver disorders data set
linear d-linear For comparison with
%  % other methods
level 1 10-fold train. correctness 0.012 76.00 0.020 76.00 SVM [33]
10-fold test. correctness 69.00 67.87 SSVM SVM jj:jj 2level 2 10-fold train. correctness 0.040 76.13 0.10 77.49 70.37 70.57
10-fold test. correctness 66.01 67.84 70.33 69.86
level 3 10-fold train. correctness 0.165 78.71 0.007 84.28
10-fold test. correctness 66.41 70.34
level 4 10-fold train. correctness 0.075 92.01 0.0004 90.27
10-fold test. correctness 69.60 70.92
3.2.2 Synthetic massive data set in 6D
To measure the performance on a massive data set we
produced with DatGen [34] a 6-dimensional test case with
5 million training points and 20 000 points for testing. We
used the call datgen -r1 -X0/100,R,O:0/100,R,O:0/100,R,O:
-O5020000 -p -e0.15.
The results are given in Table 5. Note that already on level
1 a testing correctness of over 90 % was achieved with just
0:01. The main observation on this test case concerns
the execution time, measured on a Pentium III 700 MHz
machine. Besides the total run time, we also give the CPU
time which is needed for the computation of the matrices
l .
We see that with linear basis functions really huge data
sets of 5 million points can be processed in reasonable time.
Note that more than 50 % of the computation time is spent
for the data matrix assembly only and, more importantly,
that the execution time scales linearly with the number of
data points. The latter is also the case for the d-linear func-
tions, but, as mentioned, this approach needs more operations
per data point and results in a much longer execution
time, compare also Table 5. Especially the assembly of the
data matrix needs more than 96 % of the total run time for
this variant. For our present example the linear basis approach
is about 40 times faster than the d-linear approach
on the same renement level, e.g. for level 2 we need 17
minutes in the linear case and 11 hours in the d-linear case.
For higher dimensions the factor will be even larger.
3.3 10-dimensional problems
3.3.1 Forest cover type
The forest cover type dataset comes from the UCI KDD
Archive [4], it was also used in [30], where an approach similar
to ours was followed. It consists of cartographic variables
for meter cells and a forest cover type is to be pre-
dicted. The 12 originally measured attributes resulted in 54
attributes in the data set, besides 10 quantitative variables
there are 4 binary wilderness areas and 40 binary soil type
variables. We only use the quantitative variables. The
class label has 7 values, Spruce/Fir, Lodgepole Pine, Ponderosa
Pine, Cottonwood/Willow, Aspen, Douglas-r and
Krummholz. Like [30] we only report results for the classi-
cation of Ponderosa Pine, which has 35754 instances out of
the total 581012.
Since far less than 10 % of the instances belong to Ponderosa
Pine we weigh this class with a factor of 5, i.e. Ponderosa
Pine has a class value of 5, all others of -1 and the
treshold value for separating the classes is 0. The data set
was randomly separated into a training set, a test set, and
a evaluation set, all similar in size.
In [30] only results up to 6 dimensions could be reported.
In

Table

6 we present our results for the 6 dimensions chosen
there, i.e. the dimensions 1,4,5,6,7, and 10, and for all 10
dimensions as well. To give an overview of the behavior over
several 's we present for each level n the overall correctness
results, the correctness results for Ponderosa Pine and the
correctness result for the other class for three values of .
We then give results on the evaluation set for a chosen .
We see in Table 6 that already with level 1 we have a
testing correctness of 93.95 % for the Ponderosa Pine in the
6 dimensional version. Higher renement levels do not give
better results. The result of 93.52% on the evaluation set
is almost the same as the corresponding testing correctness.
Note that in [30] a correctness rate of 86.97 % was achieved
on the evaluation set.
The usage of all 10 dimensions improves the results slightly,
we get 93.81 % as our evaluation result on level 1. As before
higher renement levels do not improve the results for this
data set.
Note that the forest cover example is sound enough as an
example of classication, but it might strike forest scientists
as being amusingly supercial. It has been known for
years that the dynamics of forest growth can have a dominant
eect on which species is present at a given location
[7], yet there are no dynamic variables in the classier. This
one can see as a warning that it should never be assumed
that the available data contains all the relevant information.
3.3.2 Synthetic massive data set in 10D
To measure the performance on a still higher dimensional
massive data set we produced with DatGen [34] a 10-dimen-
sional test case with 5 million training points and 50 000
points for testing. We used the call datgen -r1 -X0/200,R,O:
Like in the synthetical 6-dimensional example the main
observations concern the run time, measured on a Pentium
III 700 MHz machine. Besides the total run time, we also
give the CPU time which is needed for the computation of
the matrices G
l . Note that the highest amount
of memory needed (for level 2 in the case of 5 million data
points) was 500 MBytes, about 250 MBytes for the matrix
and about 250 MBytes for keeping the data points in memory

More than 50 % of the run time is spent for the assembly

Table

5: Results for a 6D synthetic massive data set,
training testing total data matrix # of
# of points correctness correctness time (sec) time (sec) iterations
linear basis functions
level 1 500 000 90.5 90.5 25 8 25
5 million 90.5 90.6 242 77 28
level 2 500 000 91.2 91.1 110 55 204
5 million 91.1 91.2 1086 546 223
50 000 92.2 91.4 48 23 869
level 3 500 000 91.7 91.7 417 226 966
5 million 91.6 91.7 4087 2239 1057
d-linear basis functions
level 1 500 000 90.7 90.8 597 572 91
5 million 90.7 90.7 5897 5658 102
level 2 500 000 91.5 91.6 4285 4168 656
5 million 91.4 91.5 42690 41596 742
of the data matrix and the time needed for the data matrix
scales linearly with the number of data points, see Table 7.
The total run time seems to scale even better than linear.
4. CONCLUSIONS
We presented the sparse grid combination technique with
linear basis functions based on simplices for the classication
of data in moderate-dimensional spaces. Our new method
gave good results for a wide range of problems. It is capable
to handle huge data sets with 5 million points and more. The
run time scales only linearly with the number of data. This
is an important property for many practical applications
where often the dimension of the problem can substantially
be reduced by certain preprocessing steps but the number
of data can be extremely huge. We believe that our sparse
grid combination method possesses a great potential in such
practical application problems.
We demonstrated for the Ripley data set how the best
value of the regularization parameter  can be determined.
This is also of practical relevance.
A parallel version of the sparse grid combination technique
reduces the run time signicantly, see [17]. Note that
our method is easily parallelizable already on a coarse grain
level. A second level of parallelization is possible on each
grid of the combination technique with the standard techniques
known from the numerical treatment of partial differential
equations.
Since not necessarily all dimensions need the maximum renement
level, a modication of the combination technique
with regard to dierent renement levels in each dimension
along the lines of [19] seems to be promising.
Note furthermore that our approach delivers a continuous
classier function which approximates the data. It therefore
can be used without modication for regression problems as
well. This is in contrast to many other methods like e.g.
decision trees. Also more than two classes can be handled
by using isolines with just dierent values.
Finally, for reasons of simplicity, we used the operator
r. But other dierential (e.g.
operators can be employed here with their associated regular
nite element ansatz functions.
5.

ACKNOWLEDGEMENTS

Part of the work was supported by the German Bundesministerium
fur Bildung und Forschung (BMB+F)
within the project 03GRM6BN. This work was carried out
in cooperation with Prudential Systems Software GmbH,
Chemnitz. The authors thank one of the referees for his
remarks on the forest cover data set.
6.



--R


Adaptive Verfahren f

The UCI KDD archive.

UCI repository of machine learning databases
Some ecological consequences of a computer model of forest growth.

Tensor product approximation spaces for the e

Learning from Data - Concepts
Data Mining Methods for Knowledge Discovery.
Approximate statistical tests for comparing supervised classi
Information Complexity of Multivariate Fredholm Integral Equations in Sobolev Classes.
Simplizialzerlegungen von beschr
On the computation of the eigenproblems of hydrogen and helium in strong magnetic and electric
On the parallelization of the sparse grid approach for data mining.
Data mining with sparse grids.
Numerical Integration using Sparse Grids.
An equivalence between sparse approximation and support vector machines.
Regularization theory and neural networks architectures.
Generalized cross validation as a method for choosing a good ridge parameter.
The combination technique for the sparse grid solution of PDEs on multiprocessor machines.
Adaptive sparse grid multilevel methods for elliptic PDEs based on

Optimized tensor-product approximation spaces
Sparse grids for boundary integral equations.
A combination technique for the solution of sparse grid problems.

High dimensional smoothing based on multilevel analysis.
Grundlagen der goemetrischen Datenverarbeitung
Some combinatorial lemmas in topology.
SSVM: A smooth support vector machine for classi
A program that creates structured data.
Bayesian neural networks for classi
Neural networks and related methods for classi
On comparing classi
Die Methode der Finiten Di
Interpolation on sparse grids and Nikol'skij-Besov spaces of dominating mixed smoothness
2d spiral pattern recognition with possibilistic measures.
Quadrature and interpolation formulas for tensor products of certain classes of functions.
Approximation of functions with bounded mixed derivative.
Solutios of ill-posed problems

Estimation of dependences based on empirical data.
The Nature of Statistical Learning Theory.
Spline models for observational data
Spiral data set.
Sparse grids.
--TR
Regularization theory and neural networks architectures
Approximation of scattered data using smooth grid functions
The nature of statistical learning theory
Information complexity of multivariate Fredholm integral equations in Sobolev classes
2D spiral pattern recognition with possibilistic measures
An equivalence between sparse approximation and support vector machines
Data mining methods for knowledge discovery
Adaptive sparse grid multilevel methods for elliptic PDEs based on finite differences
Approximate statistical tests for comparing supervised classification learning algorithms
Bayesian neural networks for classification
On the computation of the eigenproblems of hydrogen helium in strong magnetic and electric fields with the sparse grid combination technique
Learning from Data
On Comparing Classifiers
On the Parallel Solution of 3D PDEs on a Network of Workstations and on Vector Computers

--CTR
Jochen Garcke, Regression with the optimised combination technique, Proceedings of the 23rd international conference on Machine learning, p.321-328, June 25-29, 2006, Pittsburgh, Pennsylvania
Deepak K. Agarwal, Shrinkage estimator generalizations of Proximal Support Vector Machines, Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining, July 23-26, 2002, Edmonton, Alberta, Canada
J. Garcke , M. Griebel , M. Thess, Data mining with sparse grids, Computing, v.67 n.3, p.225-253, November 2001
