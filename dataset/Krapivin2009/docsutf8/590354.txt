--T
Symbolic representation of user-defined time granularities.
--A
In the recent literature on time representation, an effort has been made to characterize the notion of time granularity and the relationships between granularities. The main goals are having a common framework for their specification, and allowing the interoperability of systems adopting different time granularities. This paper considers the mathematical characterization of finite and periodic time granularities, and investigates the requirements for a user-friendly symbolic formalism that could be used for their specification. Instead of proposing yet another formalism, the paper analyzes the expressiveness of known symbolic formalisms for the representation of granularities, using the mathematical characterization as a reference model. Based on this analysis, a significant extension to the collection formalism defined in [15] is proposed, in order to capture a practically interesting class of periodic granularities.
--B
Introduction
There is a wide agreement in the AI and database
community on the requirement for a data/knowledge
representation system of supporting standard as well
as user-defined time granularities. Examples of standard
time granularities are days, weeks, months,
while user defined granularities may include business-
weeks, trading-days, working-shifts, school-terms,
with these granularities having different definitions in
different application contexts. The work in [3, 4] represents
an effort to formally characterize the notion of
time granularity and the relationships between granu-
larities, in order to have a common framework for their
specification and to allow the interoperability of systems
adopting different time granularities. The formal
definition, however, is essentially a mathematical characterization
of the granules, and it is not suitable for
presentation and manipulation by the common user.
The goal of this paper is identifying an intuitive formalism
which can capture a significant class of granularities
within the formal framework and which is
closed for this class with respect to the operations it
allows. This class can be intuitively described as containing
all finite granularities, as well as all periodical
ones. Instead of inventing yet another symbolic formalism
for this purpose, in this work we consider some
existing proposals, analyzing their expressiveness with
respect to our goal.
A symbolic formalism, based on collections of
temporal intervals, was proposed in [11] to represent
temporal expressions occurring in natural language
and used in several application domains like appointment
scheduling and time management. This formalism
has been adopted with some extensions by many
researchers in the AI [9, 15, 6] and Database area
[8, 5]. From the deductive database community, a
second influential proposal is the slice formalism introduced
in [14], and adopted, among others, in [2].
None of these formalisms and extensions seems to
have the expressive power we are seeking, despite
some of the proposals include features that go beyond
what is needed in our framework. For example, [6]
provides a powerful formalism to represent calendars
and time repetition, including existential and universal
quantification, which supports the representation
of uncertainty, a feature not considered in our frame-
work. Moreover, some calendar expressions in [6] go
beyond the specification of granularities, as defined in
[4, 3] and in this paper, allowing the representation of
overlapping granules of time. The formalism can represent
recurring events in the form of non-convex in-
tervals, but it does not seem to be able to represent
what in the following we call gap-granularities, where
gaps may not only occur between one granule and the
next, but also within granules. A business-month seen
as an indivisible time granule defined as the union of
all business-days within a month is an example.
Relevant work on non-convex intervals and repetition
includes [10, 13], but the emphasis in these
works is more on reasoning with qualitative relations
than on calendar expression representation. In addition
to the research cited above, significant work on
time granularity includes [16, 12, 7].
The contribution of this paper is twofold: on one
side we give results on the expressiveness of the formalisms
proposed in [11] and [14] which we identify
as the two basic approaches to symbolic representa-
tion, while, on the other side, we propose an extension
to one of these formalisms that allows to capture exactly
the class of finite and infinite periodical granularities
we defined in [3].
In the next section we introduce the formal notion
of time granularity. In Section 3 we briefly describe
the collection and slice symbolic representation
formalisms, and we evaluate their expressiveness
and formal properties. In Section 4, we propose an
extension to the collection formalism to capture gap-
granularities, and we conclude the paper in Section 5.


Appendix

A summarizes the syntax of the symbolic
formalism, and Appendix B contains the proofs of the
results in the paper.
2. Characterization of time granularities
In this section we introduce the mathematical
characterization of time granularities as proposed in
[4] and further refined and summarized in [3]. Granularities
are defined with respect to an underlying time
domain, which can be formally characterized simply
as a set whose elements are ordered by a relation-
ship. For example, integers (Z; ), natural numbers
rational (Q; ), and real numbers (R; ) are
all possible choices for the time domain.
granularity is a mapping G from the
integers (the index set) to subsets of the time domain
such and G(j) are non-
empty, then each element of G(i) is less than all elements
of G(j), and (2) if
are non-empty, then G(k) is non-empty.
The first condition states that granules in a granularity
do not overlap and that their index order is the
same as their time domain order. The second condition
states that the subset of the index set that maps to
non-empty subsets of the time domain is contiguous.
While the time domain can be discrete, dense, or con-
tinuous, a granularity defines a countable set of gran-
ules, each one identified by an integer. The index set
can thereby provide an "encoding" of the granularity
in a computer.
The definition covers standard granularities like
Days, Months, Weeks and Years, bounded granularities
like Years-since-2000, granularities with
non-contiguous granules like Business-Days, and
gap-granularities, i.e., granularities with non-convex
intervals as granules like Business-Months. As
an example of the encoding, Years-since-2000
can be defined as a mapping G, with G(1) mapped
to the subset of the time domain corresponding to the
year 2000, G(i + 1) to the one corresponding to the
year 2001, and so on, with
Independently from the integer encoding, there
may be a "textual representation" of each non-empty
granule, termed its label, that is used for input and
output. This representation is generally a string
that is more descriptive than the granule's index
(e.g.,"August 1997", "1/2/2000", etc.
Among the many relationships between time
granularities (see [4]), the following defines an essential
concept for this paper.
periodical with respect
to a granularity G if
1. For each i 2 Z there exists a (possibly infi-
nite) subset S of the integers such that
2. There exist R; P than the
number of non-empty granules of H , such that for
j2S G(j) and H(i+R) 6=
The first condition states that any non-empty
granule H(i) is the union of some granules of G;
for instance, assume H(i) is the union of the granules
The periodicity property
(condition 2 in the definition) ensures that the R th
granule after H(i), i.e., H(i non-empty, is
the union of G(a
This results in a periodic "pattern" of the composition
of R granules of H in terms of granules of G. The pattern
repeats along the time domain by "shifting" each
granule of H by P granules of G. P is also called the
"period" of H . The condition on R enforces that at
least one granule of H is a periodic repetition of another
granule.
A granularity H which is periodical with respect
to G is specified by: (i) the R sets of indexes of G
describing the non-empty granules of
H within one period; (ii) the value of P ; (iii) the indexes
of first and last non-empty granules in H , if their
value is not infinite. Then, if S are the sets
of indexes of G describing
spectively, then the description of an arbitrary granule
H(j) is given by 1 S
Many common granularities are in this kind
of relationship, for example, Years is periodical
with respect to both Days and Months.
Business-Months is periodical with respect to
Business-Days, which in turn is periodical with
respect to Days. Most practical problems seem to require
only a granularity system containing a set of time
granularities which are all periodical with respect to a
basic granularity. Usually Days, Hours, Seconds
or Microseconds take this role, depending on the
accuracy required in each application context. In this
paper, for simplicity, we assume there is a fixed basic
granularity covering the whole time domain.
Definition 3 We say that a granularity G is periodical
if it is periodical with respect to the basic granularity.
In

Figure

we represent the whole set of granu-
larities, according to Definition 1, partitioned in two
main subsets: those having all granules with contiguous
values (NO-GAP) and those admitting granules
with non-contiguous values (GAP). The inner
circle identifies finite and periodical granularities: finite
granularities are divided (dash line) into finite irregular
and finite periodical 2 while infinite periodical
granularities are divided into those having a first
non-empty granule and no last granule (INFINITE-R),
those having a last non-empty granule and no first
granule (INFINITE-L), and those infinite on both sides
(INFINITE). This classification will be useful when
considering the expressive power of symbolic formalisms

3. Two approaches to symbolic representa-
tion
In this section we first remind the syntax and semantics
of collection and slice formalisms, and then
analyze their expressiveness with respect to the class
of periodical granularities.
3.1. Collections and slices
The temporal intervals collection formalism was
proposed in [11]. A collection is a structured set of intervals
where the order of the collection gives a measure
of the structure depth: an order 1 collection is
This formula is correct provided that no granule of H is empty,
but it can be easily adapted to the case with finite index for first and
last non-empty granules.
2 Despite this formal distinction, finite granularities will be
treated uniformly in the results.
GAP NO-GAP
INFINITE-R
INFINITE-L

Figure

1. A classification of time granularities

an ordered list of intervals, and an order n (n ? 1)
collection is an ordered list of collections having order
Each interval denotes a set of contiguous
moments of time. For example, the collection
of Months, where each month is represented as the
collection of days in that month, is a collection of order
2. In order to provide a user-friendly representation
of collections, the authors introduce two classes
of operators on collections and the notion of calen-
dar, as a primitive collection. A calendar is defined as
an order 1 collection formed by an infinite number of
meeting 3 intervals which may start from a specific one.
The two classes of operators are called dicing and slic-
ing. A dicing operator allows to further divide each
interval within a collection into another collection.
For example, Weeks:during:January1998 divides
the interval corresponding to January1998
into the intervals corresponding to the weeks that are
fully contained in that month. Other dicing operators
are allowed, adopting a subset of Allen's interval
relations [1]. Slicing operators provide means
of selecting intervals from collections. For example,
selects
the first and last week from those identified by the dicing
operator above. In general, slicing can be done using
a list of integers, as well as with the keyword the,
which identifies the single interval of the collection (if
it is single), and the keyword any, which gives non-deterministically
one of the intervals. Collection expressions
can be arbitrarily composed using these two
classes of operators starting from calendars, which are
explicitly specified either by a periodic set of intervals,
or as a grouping of intervals from previously defined
meets interval I 2
if I 2
starts when I 1
finishes.
calendars.
The slice formalism was introduced in [14] as an
alternative to the collection formalism in order to have
an underlying evaluation procedure for the symbolic
expressions. It is based on the notions of calendar
and slice. Similarly to the collection formalism, calendars
are periodic infinite sets of consecutive inter-
vals, but there is no first nor last interval. Intervals in
a calendar are indexed by consecutive integers. Once
a basic calendar is given in terms of the time domain,
other calendars can be defined dynamically from existing
ones by the construct Generate(sp; C; l
which generates a new calendar with m intervals in
each period, the first one obtained grouping l 1 granules
of calendar C, starting from C(sp), the second
grouping the successive l 2 granules, and so on, with
treated as a circular list. A calendar C 1 is
a subcalendar of C each interval of
C 2 is exactly covered by finite number of intervals
of C 1 . Weeks, Days, Months are calendars with
DaysvMonths, DaysvWeeks, Weeks6vMonths.
A slice is a symbolic expression built from calendars
and denoting a (finite or infinite) set of not necessarily
consecutive intervals. It has the form
where the sum identifies the starting points of the intervals
and D their duration. Each C i is a symbol denoting
a calendar and O i is either a set of natural numbers
or the keyword all. If the sum is simply O 1 :C 1 , it denotes
the starting points of the intervals of C 1 whose
index belongs to O 1 , or the starting points of all intervals
all. If the sum is
On :Cn with On = fon g it denotes the starting points
of the on -th interval of Cn following each point in
. For example, the sum all.Years
denotes the set of
points corresponding to the beginning of the first day
of February and April of each year. The duration D
has the form h:C d where C d is a symbol denoting a
calendar such that C d v Cn , and h is the number
of successive intervals of C d specifying the duration.
Hence, the slice all.Years
f1g.Days . 2.Days denotes a set of intervals
corresponding to the first 2 days of February and April
of each year.
3.2. Expressiveness and relationships
Both collections and slices essentially characterize
periodic sets. Similarly to granularities, even in
these formalisms there is the notion of a basic cal-
endar, which defines the finest time units in the do-
main. Without loss of generality, in the following of
the paper we assume that this basic calendar (denoted
by C) is the basic granularity we mentioned in Section
2. A period, in terms of C can be associated
with each slice expression S as well as with any collection
expression E. Intuitively, the period indicates
the number of instants of C after which the same pattern
of intervals denoted by the expression is repeat-
ing; each interval in a period can be obtained by a constant
shift of the corresponding interval in another pe-
riod. If C are the calendars appearing in the
expression, then the period is the least common multiple
of P eriod(C i =C). Technically, P eriod(C i =C), is
defined as
is a list of integers, each one denoting
the duration of an interval of C i in terms of
returns
the j th element of the list, and length(list) returns
the number of elements in the list. For example,
and, hence, P
We now consider the expressiveness of slice expressions
with respect to the formal notion of granularity
introduced in Section 2. If all the intervals denoted
by a slice S are disjoint, we call S a disjoint slice. We
also say that a granularity G is equivalent to a slice S,
if each granule of G is formed by the union of a set of
granules of the basic granularity (C) and this set is represented
by one of the intervals denoted by the slice;
moreover, each of the intervals must describe one of
these sets.
Theorem 1 Given a disjoint slice S, there exists a no-
gap finite granularity, or a no-gap infinite periodical
granularity G equivalent to S.
Technically, if
is an infinite
slice we have an algorithm to derive
the intervals f[r
is the length in terms of the basic calendar
C corresponding to h granules of C d , starting at
r i . These intervals are the ones denoted by S within
a slice period. Then, a periodical granularity G can
be defined by taking
P eriod is the slice period in terms of C, and
C(x) for each It is shown that
G is equivalent to S. When S is finite, the same algorithm
can be easily adapted to derive all the intervals S
denotes. Then, the equivalent granularity is simply defined
explicitly mapping each granule to one of these
intervals. Disjointness ensures that the result of this
mapping is indeed a granularity.
Ignoring exceptions to leap years.
Example 1 Let S=all.Weeks
. 12.Hours be an infinite slice and Hours be
the basic calendar. The slice P eriod is 168 hours
(the number of hours in a week) and in the period
containing Hours(1) the slice denotes the
set of intervals f[25; 36]; [49; 60]g. The periodical
G, equivalent to S, is defined by taking
(the number of intervals in a period),
x=25 Hours(x) and
The following example shows that if a slice is
non-disjoint, then there is no equivalent granularity.
Example 2 Let S=all.Weeks
. 3.Days. According to the slice semantics, this expression
denotes all intervals spanning from Tuesday
to Thursday and all intervals from Wednesday through
Friday. By Definition 1, no pair of granules of the
same granularity can overlap. Hence, no granularity
can be found which is equivalent to S. 2
To understand the expressiveness of the slice formalism
with respect to granularities, we still need to
check if any granularity in the identified classes is representable
by a disjoint slice.
Theorem 2 Given a no-gap finite granularity or a
no-gap infinite periodical granularity, there exists an
equivalent slice.
The theorem states that any finite (periodical or
not) granularity can be represented by a slice, and that
the same holds for periodical granularities which are
unbounded on both sides. INFINITE-R and INFINITE-
granularities cannot be represented by a slice, since
the only way to denote an infinite set of intervals with
a slice is to have O all, and there is no way within
the slice formalism to impose a minimum or a maximum
on that set. 5
From the above results we can conclude that disjoint
slices can represent exactly the set of granularities
identified in Figure 2, while non-disjoint ones
do not represent granularities at all. Unfortunately, it
seems that there is no way to enforce disjointness by
simple syntax restrictions.
We now consider the collection formalism.
Proposition 1 Any collection E resulting from the application
of a dicing or slicing operator is such that
5 Note however, that the addition of a reference interval (bound)
to each slice, as used in [2], provides an easy extension to capture
all no-gap periodical granularities.0000000000000000001111111111111111111111110000000000001111111111111111110000000000000000001111111111111111111111110000000000111111111111111000000111111
GAP NO-GAP
INFINITE-R
INFINITE-L
Disjoint slice expressions

Figure

2. The subset of the granularities
captured by the slice formalism
any two intervals t and u contained in E are either
equal or disjoint.
Proposition 1 follows from the semantics of the
operators, and from the fact that each calendar contains
only disjoint intervals. Similarly to slices, we
say that a granularity G is equivalent to a collection
E, if each granule of G is formed by the union of the
granules of C represented by one of the intervals in
the collection; moreover, each interval in the collection
describes the composition of one of the granules
of G.
Theorem 3 Given a collection expression, there exists
an equivalent no-gap periodical or finite non periodical
granularity.
Similarly to Theorem 1, we developed an algorithm
to parse the expression, to derive its period, the
intervals it denotes within the period 6 , and lower/upper
bounds if present. Once the intervals are derived, we
have all the data that is needed to define the granularity
G, since it will have the same period, the intervals
within the period define the corresponding granules,
and the lower/upper bounds are used to impose a start-
ing/ending non-empty granule.
Example 3 Consider
E=f1/Mondays:during:Years.2000g.
This collection expression identifies an order 1
6 The intervals may be structured in a collection of order higher
than 1, but this is irrelevant with respect to the time granules that the
expression denotes.
collection that contains all first Mondays of each
year starting since Monday, January 1st 2001. We
assume Days is the basic calendar with
Saturday, Jan 1st 2000. We first have to compute
the expression period. Since Mondays is defined
as 1/Days:during:Weeks with the periods
of Days and Weeks equal to 1 and 7 respec-
tively, is the period computed for
Mondays. Similarly, since the period for Years
with respect to the basic calendar is 1461 (4 years
in Days), the whole expression period is computed
as lcm(7; years in Days).
Then, G is defined as having period
28 (the number of granules in each period),
(7/1/2002), . ,
and To obtain these intervals the
algorithm first restricts years to those after 2000, then
it represents all Mondays within those years, and in
the end it extracts the intervals corresponding to the
first Monday. 2
We also have the counterpart of Theorem 3.
Theorem 4 Given a no-gap periodical or finite non-
periodical granularity, there exists an equivalent collection
GAP NO-GAP
INFINITE-R
INFINITE-L
collection expressions

Figure

3. The subset of the granularities
captured by the collection formalism
Note that in this case, all granularities in the right
side of the inner circle of Figure 3 are captured. We
can conclude that slices and collections have incomparable
expressiveness, since slices can represent sets
of overlapping intervals, and collections can represent
INFINITE-R and INFINITE-L periodical granularities.
From the above results, it is clearly possible to translate
from one formalism to the other, when considering
expressions denoting FINITE or INFINITE granular-
ities, but it seems to be difficult to devise general rules
to translate at the symbolic level, preserving the intuitiveness
of the expression. Indeed, despite the
in slices may be intuitively interpreted as equivalent
to :during: in collections, they actually have a
different semantics.
The collection formalism has been extended with
some additional operators in [8]. In particular, control
statements if-then-else and while are introduced
to facilitate the representation of certain sets
of intervals, as for example, the fourth Saturday of
April if not an holiday, and the previous business-day
otherwise. Unfortunately, the syntax allows the user
to define collections which contain overlapping intervals
7 . This implies that there are collection expressions
in the extended formalism for which there does
not exist an equivalent granularity.
4. An extension proposal
Both the collection and slice formalisms as well
as their known extensions cannot represent gap gran-
ularities. Indeed, this requires a non-convex interval
representation for each granule which is formed by
non-contiguous instants. For example, they cannot
represent Business-Months, where each granule
is defined as the set of Business-Days within a
month, and it is perceived as an indivisible unit. We
propose an extension to the collection formalism in order
to capture the whole set of periodical granularities.
We introduce the notion of primitive collection,
which includes calendars as defined in the collection
formalism as well as order 1 collections of non-convex
intervals, where each of the intervals represents a gran-
ule. A primitive collection PC can be specified by
sp is a synchronization
point with respect to an existing calendar
is the period expressed in terms of C 0 , and X is
the set of non-convex intervals 8 identifying the position
of granules of PC within a period. The synchronization
point sp says that PC(1) will start at the same
instant as C 0 (sp).
7 For example, consider an expression representing a semester
following the last day of the month, if it is a Sunday, otherwise
the week following that day. Considering 31/5/1998 and 30/6/1998,
both the semester starting 1/6/1998 and the week starting
will be denoted, with the first properly containing the second.
8 Each x is the non-convex interval representing the i-th
granule.
Example 4 Suppose a company has 2 weekly working
shifts for its employees:
shift1=fMonday, Wednesday, Saturdayg and
shift2=fTuesday, Thursday, Fridayg. It may
be useful to consider these as two periodic
granularities, where each shift is treated as a
single time granule within a week. If Thursday
1/1/1998 is taken as Days(1), shift1 =
Generate(5; Days; 7; fh[1; 1]; [3; 3]; [6; 6]ig). In-
deed, the synchronization point is 5, since the first
granule of shift1 following Days(1) starts on
Monday January 5th 1998 which is 5 days later. C 0
is Days, the period P is 7 days and X is composed
by x which identifies the
single granule within the period, formed by the
first, third, and sixth day, starting from 5/1/1998,
and repeating every 7 days. Similarly,
Generate(6; Days; 7; fh[1; 1]; [3; 3]; [4; 4]ig) denotes
the first, third and fourth day, starting from 6/1/1998,
and repeating every 7 days. 2
The user can specify collection expressions by
arbitrarily applying dicing and slicing operators starting
from primitive collections. Since operators now
apply to non-convex intervals, we need to revise
their definition. Let t and u be non convex in-
tervals, with
an  x  b n g and S
be the sets of values represented
by t and u respectively. Dicing operators are
based on the following binary relations on non-convex
intervals: 9
during u iff S ' S 0
intersects u
starts u iff (a
A dicing operator :rel: takes an order 1 collection
as its left operand and an interval u
as its right operand, and it returns an order 1 collection
rel ug. If
the strict form : rel : is used, then
rel ug, i.e., only the portion
of t which is contained in u is part of the resulting
9 This set of relations is similar to the one chosen in [11] for convex
intervals. We consider it only as a good basic set which allows
the representation of most common granularities while having a simple
implementation. It can be extended to a richer set considering,
for example, the taxonomy of relations given in [10].
collection. When the right operand is a collection, instead
of a single interval, the same procedure is applied
for each of its intervals, resulting in a collection of one
order higher. A slicing operator k=E replaces each
collection contained in E with the k-th non-convex
interval in that collection, while
replaces it with the collection made of the subset of intervals
whose position in the collection is specified by
g.
Example 5 Consider the collection expression
Weeks:?:2/shift1:during:1998/Years
where shift1 was defined in Example 4. This
expression denotes all weeks following the end of
the second work-shift of 1998. Years is the order
ity, we assume the interval [1::365] corresponds
to year 1998. Then, the slicing 1998/Years
returns the interval h[1::365]i, and the dicing
shift1:during:1998/Years returns the finite
collection of order 1 composed by all the work-shifts
during 1998: fh[5; 5], [7; 7], [10; 10]i, . , h[355; 355],
360]ig. The selection of the second
of those work-shifts returns the non-convex interval
Finally, the dicing
Weeks:>:h[12; 12]; [14; 14]; [17; 17]i generates the
collection of all the weeks that start after
January 17-th, i.e., fh[19; 23]i; h[26;
We state a formal property of the proposed extension

Theorem 5 The extended collection formalism can
represent all and only the granularities which are either
periodical or finite non-periodical.
To support this result, the algorithm used in the proof
of Theorem 3 has been extended to consider non-convex
intervals. The granularities captured by the
proposed extension are shown in Figure 4.
5. Conclusions
In this paper we have considered a recently proposed
theoretical framework for time granularities and
we have analyzed two of the most influential proposals
for calendar symbolic representation. On one side,
we have shown that the theoretical framework is general
enough to capture all the sets of disjoint intervals
representable by those formalisms. On the other side
we have shown exactly which subclass of granularities
can be represented by each formalism. From this
GAP NO-GAP
INFINITE-L
INFINITE-R
extended collection expressions

Figure

4. The subset of granularities captured
by the proposed extension
analysis, we have proposed an extension of the collection
formalism which captures a well-defined and
large class of granularities, providing a good coverage
of granularities that may be found in database and temporal
reasoning applications.
We are currently working at the definition and implementation
of set operations, performed at the symbolic
level, among extended collection expressions.
This problem has interesting applications (see e.g.,
[2]) but it is not addressed in [11] and derivative work
for collections, and only briefly investigated in [14] for
slices.



--R

Maintaining Knowledge about Temporal Intervals
An Access Control Model Supporting Periodicity Constraints and Temporal Reasoning

A General Framework for Time Granularity and its Application to Temporal Reasoning
in book Database support for workflow management: the WIDE project
Expressing Time Intervals and Repetition within a Formalization of Calendars
Temporal Granularity for Unanchored Temporal Data
Implementing calendars and temporal rules in next generation databases

a taxonomy of interval relations
A representation for collections of temporal intervals
Metric and Layered Temporal Logic for Time Granularity

An efficient symbolic representation of periodic time
Reasoning About Periodic Events
The TSQL2 Temporal Query Language

for any integer s and 1
is one of those denoted by S.
is among the intervals denoted by the slice.
"!"



--TR

--CTR
Claudio Bettini , X. Sean Wang , Sushil Jajodia, Temporal Reasoning in Workflow Systems, Distributed and Parallel Databases, v.11 n.3, p.269-306, May 2002
flexible approach to user-defined symbolic granularities in temporal databases, Proceedings of the 2005 ACM symposium on Applied computing, March 13-17, 2005, Santa Fe, New Mexico
Lavinia Egidi , Paolo Terenziani, A mathematical framework for the semantics of symbolic languages representing periodic time, Annals of Mathematics and Artificial Intelligence, v.46 n.3, p.317-347, March     2006
