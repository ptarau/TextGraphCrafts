--T
Supporting Content-Based Retrieval in Large Image Database Systems.
--A
In this paper, we investigate approaches to supporting effective and
efficient retrieval of image data based on content. We first
introduce an effective block-oriented image decomposition structure
which can be used to represent image content in
image database systems. We then discuss the
application of this image data model to content-based image retrieval.
Using wavelet transforms to extract image features,
significant content features can be extracted from image data
through decorrelating the data in their pixel format
into frequency domain. Feature vectors of
images can then be constructed. Content-based image retrieval
is performed by comparing the feature vectors of the query image
and the decomposed segments in database images.
Our experimental analysis illustrates that the proposed
block-oriented image representation
offers a novel decomposition structure to be used to
facilitate effective and efficient image retrieval.
--B
Introduction
Content-based image retrieval has been proposed to allow retrievals to be performed
on the basis of a variety of aspects of image content [1, 5, 15, 10, 6, 2, 18].
In this context, a challenging problem arises with many image databases, within
which queries are posed via visual or pictorial examples. We term such queries
visual queries. A common visual query to an image database system would involve
finding all images in that database which contain a subimage that is similar to
a given query image. Such retrievals must use embedded content features, such
as the shape, color, texture, layout, and position of various objects in an image.
There have not been generic tools which can facilitate to understand image content
to a satisfiable extent. The automatic retrieval of images on the basis of content
thus pose difficult problems. An approach which has drawn much recent attention
involves the extraction of the color and texture features of images using image processing
techniques. Currently, most research proposes to formulate image feature
vectors based on color and texture characteristics. Content-based image retrieval is
then supported by searching and comparing the feature vectors of the query image
and database images.
As the feature vector of a database image may not correctly represent its subim-
ages, the retrieval based on the comparison between the feature vectors of the query
image and database images themselves may not provide satisfiable results for visual
queries. Thus, image segmentation is necessary in the implementation of feature-based
techniques for searching image databases [11]. Effective segmentation will
isolate the important features of the images in the database. Ideally, the results
generated through the process of image recognition and analysis would be used to
automatically segment image content. However, as image recognition itself is still
in its formative stage, investigations in this direction are still in their infancy. To
avoid manual segmentation of images in a large image database, a block-oriented
approach based on quad-tree decomposition of images has been adopted to circumvent
the difficulty of automatic segmentation [5, 11]. An effective query-by-texture
approach using quad-tree segmentation and wavelet transforms has been presented
[11]. The decomposition approach was demonstrated to be effective.
In this paper, we conduct a comprehensive study on image data representation
and retrieval approaches to support effective and efficient retrieval of image data
based on content. We first introduce an effective block-oriented image decomposition
structure to be used in content-based image retrieval. This structure is an
extension of the quad-tree decomposition. We then discuss the application of this
data model to content-based image retrieval. Wavelet transforms are used to extract
image features. Significant content features are extracted from image data
in their pixel format through decorrelating the image data into frequency domain
using wavelets. Feature vectors of images can then be constructed. Content-based
image retrieval is performed by comparing the feature vectors of the query image
and the segments in database images. Our experimental analysis illustrates that
the nona-tree decomposition offers a novel decomposition structure to be used to
facilitate effective and efficient image retrieval.
The rest of the paper is organized as follows. Section 2 introduces the block-oriented
data structure, namely, nona-trees, and discusses the computational complexity
of this data structure. Section 3 investigates the application of the nona-tree
image representation in content-based image retrieval. Experimental results will be
presented in this section. Section 4 offers discussions on the effectiveness of the
nona-tree decomposition with different wavelet transforms and compares the effectiveness
of the nona-tree decomposition with other block-oriented decomposition
approaches. Concluding remarks are offered in Section 5.
2. Image Data Modeling - Nona-trees
In this section, we will present the nona-tree image decomposition structure to be
used to specify image content in image databases. We then discuss the computational
complexity of the nona-tree decomposition structure.
2.1. Nona-tree
A nona-tree is a hierarchical image decomposition structure based on a slight modification
of the recursive decomposition of images that is proposed in quad-trees [4].
That is, each decomposition on an image segment produces nine subsegments of
equal size rather than four. These subsegments include four equal-sized quadrants
(numbered 1, 2, 3, and 4), one subsegment of the same size as each quadrant taken
from the central area of the image segment (numbered 5) , and four subsegments
of the same size as each quadrant produced from the central areas of the upper,
bottom, left, and right halves of the image segment (numbered 6, 7, 8 and 9). Figure
1 demonstrates the positions of these subsegments in the decomposed image
segment.
Figure

1. Nine subsegments in nona-tree decomposition.
The decomposition process of a nona-tree can be described recursively with the
root representing the entire image and its children representing the decomposed
segments which, in turn, are roots for further decomposed segments. Each internal
node has at most nine children. The strategy of quad-tree decomposition proposed
in [11] can be used in determining the decomposition of subsegments 1, 2, 3 and
4 in the nona-tree. That is, decompositions are only carried out on the segments
with heterogeneous textures. Before four children are spawned by each parent,
conditions for merging are tested. A distance threshold is computed for each child
on the basis of extracted texture features. The distances in the feature space are
measured from the parent node to each child. If the distances to all four children
fall within the thresholds of the children, a single texture would be declared in
the parent node, and no further decomposition is necessary. Otherwise, pair-wise
grouping of the children will then be performed. That is, if the distance between
two neighboring children falls below the thresholds of both, the children are merged
as a single child. Also, whether or not the subsegments 1, 2, 3 and 4 are generated
determines the generation of subsegment 5, 6, 7 and 8. We have the following cases:
ffl No decomposition of subsegments 1, 2, 3, and 4: a single texture has been
declared for the segment. Thus, subsegment 5, 6, 7, 8, and 9 should not be
generated.
ffl No decomposition of subsegments 1 and 2: a single texture has been declared
for the merging of subsegments 1 and 2. Thus, subsegment 6 should not be
generated.
ffl No decomposition of subsegments 1 and 3: a single texture has been declared
for the merging of subsegments 1 and 3. Thus, subsegment 8 should not be
generated.
ffl No decomposition of subsegments 2 and 4: a single texture has been declared
for the merging of subsegments 2 and 4. Thus, subsegment 9 should not be
generated.
ffl No decomposition of subsegments 3 and 4: a single texture has been declared
for the merging of subsegments 3 and 4. Thus, subsegment 7 should not be
generated.
Those subsegments which do not correspond to any of the above cases are generated
in the nona-tree. Figure 2 illustrates the representation of an image by a nona-
tree data structure in which the subsegments of each segment are listed in the
increasingly numbering order. For example, at the first level of decomposition, the
given image is decomposed into nine segments. All segments are heterogeneous
and thus further decomposition is needed. At the second level of decomposition,
segment 2 obtained from the first level is decomposed into nine subsegments. In
this decomposition, subsegments 1, 2, 4, 6 and 9 are homogeneous and all other
subsegments are heterogeneous. Other segments can be similarly decomposed.
(a)
Image
(b)

Figure

2. (a) Image; (b) Nona-tree.
2.2. Computational Analysis
We now discuss the maximum number of segments existing in a nona-tree and
analyze the overlapping coverage between a query image and the segments of a
database image in the situation of the query image is similar to a subimage of the
database image.
2.2.1. Number of Segments in Nona-tree

Table

1 illustrates the relationship between image size and nona-tree level.

Table

1. Nona-tree level and image size in the hierarchy
Level
Image Size 256x256 128x128 64x64 32x32 16x16
We will now discuss the maximum number of segments existing in a nona-tree
with levels. Clearly, at each level i, there are at most 9 i possible segments.
However, there are redundant segments; these start at level two of the nona-tree.
We introduce the concept of a representative point for each segment to illustrate
the maximum number of segments possible in each nona-tree. The representative
point of a segment in a nona-tree refers to the uppermost left point of that segment.
Thus, in Figure 3 (a), labeled bold points A through I are representative points for
the nine subsegments of the given segment. That is, points A, C, G, I in Figure
3 (a) are representative points for subsegments 1, 2, 3, 4, respectively. Point E
represents subsegment 5, and points B, H, D, F represent subsegments 6, 7, 8, 9,
respectively. Thus, at level 1, we have 3 \Theta which
is 9. Subsegments at the next level are similarly labeled in Figure 3 (b). Note that
some of the points represent multiple segments. For example, the point labeled
N in

Figure

3 (b) represents the shaded area which appears to be a subsegment
of segment 1, 5, 6, and 8 at level 1. This subsegment is the fourth subsegment
of segment 1, the first subsegment of segment 5, the third subsegment of segment
6, and the second subsegment of segment 8. In Figure 3 (b), there are actually
subsegments at the third level of the nona-tree,
which can also be expressed as 1). Thus, there are 81 \Gamma
redundant subsegments. By analyzing these numbers, at the ith level, we have at
most instead of 9 i subsegments. Table 2 lists the maximum number of
segments at each level of a nona-tree.
Thus, strictly speaking, nona-trees are hierarchical graphs in which nodes in different
branches at one level may share common nodes at the next lower level.
(a) (b)

Figure

3. (a) Segment decomposition and representative points at level 1; (b) Segment decomposition
and representative points at level 2.
Table

2. Maximum number of segments in nona-tree
Level
segments in nona-tree
2.2.2. Subimage Coverage
The nona-tree decomposition ensures that, if a portion of a decomposed image
matches a query image, there then exists a segment which covers at least 9of the
query image. Figure 4 illustrates the situation. In this example, we assume that
the size of the query image is compatible with that of the first level decomposition.
In

Figure

4 (a), the shaded area of the query image is ( 3
which is 9
In
general, as shown in Figure 4 (b), the covered area A of the query image has the
following cases:
the area covered by segment 5 is:
the area covered by segment 6 is:
the area covered by segment 8 is:
4 r: the area covered by segment 1 is:
(a) (b)

Figure

4. Covered area of query image by segments.
Clearly, this also holds when the query image is located in other places within
the decomposed image.
3. Texture-based Image Retrieval
In this section, we will investigate the application of the proposed image data model
to content-based image retrieval in image database systems. A search procedure on
the nona-tree is designed to compare the feature vectors between the query image
and database images. Wavelet transforms will be used to generate the feature
vectors of image segments.
3.1. Searching Nona-trees
Let database images be represented by their nona-trees. A procedure of feature
generation is then applied to each node in the nona-tree. Thus, each node contains
the feature vector of a segment rather than the original pixel data. Also, the feature
vector is generated on the basis only of the pixel data of the node rather than the
image.
We now consider an image database in which all images are represented by their
feature vectors in nona-trees. Let Q be an query image. We discuss a procedure for
matching the feature vector of the query image with that of the database images.
A correspondence is first established between database image contents and feature
vectors, and retrievals are then performed on the basis of the relationship between
these feature vectors and the feature vectors of query image Q. We can then locate
those images within a large image database which contain or are similar to the
query image, as governed by set criteria.
A relationship between a given query image Q and any image M in the database is
determined by comparing the feature vector of Q with different portions of M. This
can be done by traveling through the nona-tree of M from the root to the bottom.
We use the root mean square metric to compare the distance between the feature
vector of the query image and that of the image segments of the database images.
That is, for given feature vectors v 1 (a 1 ; :::; an ) and v 2 (b distance is
computed as follows:
(1)
For a given threshold t, if the distance between the query image and a segment
of a database image is less than t, then we select this database image as a matched
image.
Note that the above search of individual nona-trees may be highly time consum-
ing. However, this problem can be circumvented by a novel indexing technique on
the feature vectors generated from the image segments. Consider a feature space
which contains all generated feature vectors of image segments. An indexing technique
can be constructed to classify the feature vectors into different clusters based
on their distances in the feature space [7]. For a given query image, an efficient retrieval
can then be supported by search through the index. The details to construct
an index on the feature space will not be discussed further in this paper.
3.2. Wavelet Transforms
A wide variety of wavelet-based image compression schemes have been reported
in the literature. In this approach, compression is accomplished by applying a
wavelet transform to decorrelate the image data, quantizing the resulting transform
coefficients, and coding the quantized values. The central part of this process,
wavelet transform, is what we want to examine. The data transformed by wavelets
can be utilized for content-based retrieval.
Wavelet transform is a type of signal representation that can give the frequency
content of the signal at a particular instant of time. Initially, regions of similar
texture need to be separated out. This may be achieved by decomposing the image
in the frequency domain into a full subband tree using filter banks [16]. In order
to explore the advantage of deriving the texture features from compressed image
format, the wavelet transform can be used for the subband decomposition [9]. Each
of the subbands obtained after filtering has uniform texture information. Typical
methods like energy estimation in subbands are used for feature extraction from
the subbands.
Wavelet based subband coding allows simultaneously for high spatial resolution
at high spatial frequencies and high spatial-frequency resolution at low spatial fre-
quencies. Thus a filter bank based on wavelets could be used to decompose the
image into low-pass and high-pass spatial-frequency bands [8].
Using a specific wavelet transform, feature extraction is performed on all image
segments in the nona-trees. Three-level of subband decomposition is used [9]. Each
of the subbands obtained after filtering have uniform texture information. In our
experiments, the feature extraction was performed using Daubechies wavelet transform
[14]. Each three-level transformation produces 10 subbands. The features
were extracted by energy estimation in subbands. Two energy features, mean and
variance, are computed on each subband. Thus, each feature vector has 20 ele-
ments. This feature extraction procedure is applied to all image segments in the
tree representation of each image. Each node in the nona-tree thus represents a
segment of the image and its feature vector.
3.3. Experiments
A testbed of the image database has been constructed from Brodatz texture images
[3] and their variants. There are 112 different textures and 20 samples with each
texture. The images are 96 \Theta 96 pixels in size. The query images were chosen as
random subimages of randomly chosen Brodatz images.
Given a query image, its feature vector is calculated using the above feature
extraction approach. We then compare the distance between the query image and
the image segments of the database images with a size greater than or equal to the
size of the query image. Figure 5 presents four query images with the size 24 \Theta 24
pixels, each of which is associated with the best selected four database images based
on the distance comparison. The number under each database image in the figure
indicates the distance between this database image and the given query image.
d001p d001j d001d d095p
(a)
d067m d067d d041j d067i
(b)
d077o d077s d077n d077t
(c)
d105k d076t d076o d105l
(d)

Figure

5. Iconic images and matched database images
Let the position of each pixel in the image be represented by (x; y) coordinates,
where x refers to the column position and y refers to the row position. Let (0;
coordinates be at the most upper left point of the image. Table 3 presents the
positions of the matched segments within the database images shown in Figure 5.
For example, for query image Figure 5 (a), a matched segment was found in image
d001p at the position of the 48th row and the 48th column with the size 24 \Theta 24
pixels. This segment appear to be the subsegment 1 of segment 3 at the first depth
nona-tree decomposition. Similarly, a matched segment was found in image d001j
at the position of the 0th column and 24th row with the size 24 \Theta 24 pixels. This
segment appear to be the subsegment 3 of segment 1 at the first depth nona-tree
decomposition. The exact positions of the matched segments are illustrated in

Figure

5.

Table

3. Positions of matched image segments in
database images
Test Image matched segment position size
d001d (12,60) 24x24
d067d (48,0) 24x24
d077s (36,0) 24x24
d077n (0,12) 24x24
d077t (48,48) 24x24
d076t (24,72) 24x24
d105l (48,48) 24x24
Database images belonging to different texture groups but containing closely similar
texture features may fall within a very small distance. As indicated in Figure
5, for example, d105k, d105l and d076t, d076o are in two different texture groups.
However, the texture features in the two group contain closely similar texture fea-
tures. A similar situation also occurs to the groups of d001 and d095.
Note that the selection of the threshold is application dependent. As shown in

Figure

5, the minimum distance between similar images varies with different images.
Also, note that some semantically irrelevant images may have feature vectors that
fall within a very small distance. To prevent the retrieval of such irrelevant images,
a clustering approach is needed to classify the images into different categories before
retrieval is performed [20].
4. Discussions
In this section, we will discuss the retrieval effectiveness of the nona-tree decomposition
using different wavelet transforms and compare the effectiveness of the
nona-tree decomposition with other block-oriented decomposition approaches. We
will also compare the block-oriented decomposition strategy with the traditional
moving window analysis [13].
4.1. Retrieval Effectiveness with Different Wavelets
We now discuss the retrieval effectiveness of the nona-tree using different types of
wavelet transforms. The retrieval effectiveness was calculated in terms of recall
and precision [17]. Recall is defined as the ratio of the number of relevant images
retrieved to that of the total relevant images in the database:
Precision is the ratio of the number of relevant images retrieved to that of all the
images retrieved:
retrieved
The retrieval effectiveness for given query images varies on several aspects, including
the locations of subimages in database images to which the query image is
found to be similar, the size of query images and the types of wavelet transforms
used to generate feature vectors.
In order to evaluate the retrieval effectiveness of various wavelet transforms, experiments
were performed on two different types of wavelet transforms - Haar and
Daubechies. Figure 6 presents the results of the retrieval experiments with these
two wavelet transforms, while the query images are located close to the central areas
of the upper, bottom, left, or right halves of the image segments of the database
images. Based on these experiments, we see that the Daubechies with six coefficients
is superior to the Daubechies with four coefficients and Haar in cases (a),
(c), and (d). We also observe that Haar transform is superior to the Daubechies in
case (b). Based on the experiments, the retrieval effectiveness of the nona-tree using
wavelet transforms varies with application domains. Thus, the type of wavelet
transform plays an important role in retrieval effectiveness. Experiments must be
performed to determine which particular wavelet transform is best suited to any
specific application domain.
Haar
Precision
Haar
Precision
Recall0.300.400.500.600.700.800.901.00
(a) left (b) right
Haar
Precision
Recall0.600.700.800.901.00
Haar
Precision
Recall0.300.400.500.600.700.800.901.00
(c) upper (d) bottom

Figure

6. Retrieval effectiveness of Haar and Daubechies wavelet transforms.
In [19], we have introduced the nona-tree and its application in fractal-based
image content retrieval. The nona-tree structure can also be used to search and
match other image features, including color.
4.2. Comparison with Other Block-Oriented Trees
A quad-tree decomposition ensures that, if a portion of a decomposed image matches
a query image, there then exists a segment which covers at least 1of the query
image. Obviously, such a overlapping coverage may not be sufficient for supporting
feature-based matching. Let us now consider a quin-tree which is similar to the
nona-tree but omits segments 6, 7, 8, and 9 in each decomposition. A quin-tree
decomposition ensures that, if a portion of a decomposed image matches a query
image, there then exists a segment which covers at least 1of the query image.
We now compare the effectiveness of the quad-, quin- and nona-trees in content-based
image retrieval. Our experiments are performed by selecting various subimages
in the database images, which are remote to the central area of the database
images, to be the query images. Retrieval based on these query images is then
performed. Figure 7 presents the results of the retrieval experiments when a given
query image is located at or very close to the central areas of the upper, bottom,
left, or right halves of the image segment. In principle, the image segments in the
nona-tree decomposition offer higher possibilities to match with such query images
than those in the quad- and quin-tree decomposition. In experiments, we can see
from

Figure

7 that the query retrieval effectiveness using the nona-tree structure is
much higher than using the quin- and quad-trees.
Quad Daubechies
Quin Daubechies
Daubechies
Precision
Recall5.0015.0025.0035.0045.0055.0065.0075.0085.0095.000.00 20.00 40.00 60.00 80.00 100.00
Quad Haar
Quin Haar
Haar
Precision
Recall5.0015.0025.0035.0045.0055.0065.0075.0085.0095.000.00 20.00 40.00 60.00 80.00 100.00
(a) Upper (b) Bottom
Quad Daubechies
Quin Daubechies
Daubechies
Precision
Recall5.0015.0025.0035.0045.0055.0065.0075.0085.0095.000.00 20.00 40.00 60.00 80.00 100.00
Quad Haar
Quin Haar
Haar
Precision
Recall5.0015.0025.0035.0045.0055.0065.0075.0085.0095.000.00 20.00 40.00 60.00 80.00 100.00
(c) Left (d) Right

Figure

7. Retrieval effectiveness for a query image located at or very close to the central areas of
the upper, bottom, left, and right halves of the image block.
The query retrieval effectiveness using the quin-tree is also higher than using
the quad-tree, especially when the query images are found to be similar to the
subimages located in the central area of the database images. This illustrates that
for query images which are located in such places in database images, the nona-
tree decomposition offers a mechanism that is more effective in identifying relevant
images. For those query images which are commonly covered by the image segments
of quad-, quin-, and nona-trees, we observe that, in a recall range between 40 and
90 percent, the nona-tree structure offers the best retrieval precision results. For a
recall range under 40 percent, nona-tree decomposition may not result in increased
retrieval precision comparing with quad- or quin-tree decomposition, because a
greater number of irrelevant images were identified by the nona-tree structure.
Moreover, we also observed that, when the recall is greater than 90 percent, the
performance of all the trees degrades. However, the nona-tree structure is still
performed better than both quin- and quad-tree structures. This can be attributed
to the fact that, in case of the nona-tree, the query image is compared with more
subsegments and there is a higher number of irrelevant images that get retrieved.
We now discuss the issue of whether the nona-tree structure should be further
expanded. Theoretically, the block-oriented image decomposition can continue to
expand the nona-tree structure to include more segments. Clearly, such a expansion
will result in that, if a portion of a decomposed image matches a query image, there
then exists a segment in the decomposed image which covers more than 9of the
query image. However, to guarantee evenly distributed segment decomposition and
equally coverage of query images, the segments to be added at each level of tree decomposition
is highly explosive. For example, the smallest number of subsegments
to be decomposed for each segment to expand the nona-tree structure is 25 (Let us
term this tree structure the 25-tree). The smallest number of subsegments to be
decomposed for each segment to further expand the 25-tree structure is 81. We see
that such a expansion will cause the feature space to explosively grow and seriously
affect retrieval efficiency.
Thus, the trade-off between image retrieval effectiveness and efficiency must be
considered in choosing a specific block-based decomposition strategy. Our experimental
results indicate that the nona-tree structure is more effective than both
quad- and quin-tree structure for certain query images. In addition, although the
nona-tree structure increases the number of segments than the quad- or quin-tree
structure, the retrieval efficiency can be remained by a good indexing technique.
4.3. Comparison with Traditional Moving Window Analysis
An alternative to hierarchical decomposition methods is the traditional moving
window analysis. Here the signal processing argument is that the image, since it
consists of projections of multiple objects, cannot be treated as a stationary stochastic
process. Instead, it is reasonable to regard the image as having been generated
by a short-space stationary process, where the signal (image) characteristics remain
stable over a short-space and can change in adjacent spaces. The correct way to
analyze such an image is by the use of an overlapping moving window. The size
of the window is usually left unspecified as it is application dependent. However,
there is a distinct relationship between the window size and overlap between win-
dows, which can be derived based on sampling theory arguments. Specifically, it
was shown in [12], that a minimum overlap of N=2 x N=2 for a moving window
of size N x N must be maintained. From this observation, the quad-trees that
do not maintain overlap between windows cannot do a complete analysis of the
2D short-space signal (image). By comparison, the nona-trees meet the minimum
overlap requirement by having the segments at each level start at an offset of N=2.
For recognizing query objects in unsegmented images, the overlapping window
method was used in [13]. There, a relation was derived between the window size
the shift in window (L and the size of the query pattern (N 1
to be detected as:
If the moving window analysis was done using the above constraints, then it was
shown that one of these windows was guaranteed to contain only the query pattern
(if not all of it). With this tradeoff, we could design windows that captured any
specified percent of query area by suitably varying M i and L i . It was also shown
that a window containing only the query pattern can be detected even under pose
changes by bounding the maximum pose change.
The disadvantage with this scheme is that it is very model-based in that, for each
query, a different moving window analysis is required indicating that the windowing
be done dynamically during querying rather than during database creation. One
way to get around this is to categorize the queries in terms of size ranges and the
moving window analysis per category can be done ahead of time. Alternatively, we
can fix a window size for one-time moving window analysis (usually corresponding
to the smallest query) and scale a given query region to the standard size before
invoking search. But the disadvantage with these schemes is that to maintain the
constraint described above, especially under pose changes, the windows may have
to be very small, so that even if only the query region is isolated in the window,
due to the small window size, the feature generation process may not give reliable
features for matching to query region.
In contrast, the nona-tree decomposition can be considered as anticipating queries
of different size and/or undergoing different pose changes for localization.
5. Conclusions
In this paper, we have conducted a study on image data representation and retrieval
approaches to support effective and efficient retrieval of image data based
on content. An effective block-oriented image decomposition structure, termed
nona-tree, has been introduced to be used for content-based image retrieval. This
decomposition structure offers a better block-oriented tree decomposition approach
than the quad-tree decomposition. We have also discussed the application of the
nona-tree data model to content-based image retrieval. Wavelet transforms were
used to extract image features. Feature vectors of images were constructed using
two wavelet transforms. Content-based image retrieval were performed by comparing
the feature vectors of the query image and the segments in database images.
Our experimental analysis have illustrated that the nona-tree decomposition offers
a novel decomposition structure to be used to facilitate effective and efficient image
retrieval.



--R

QBISM: A Prototype 3-D Medical Image Database System
A Visual Information Management System for the Interactive Retrieval of Faces.
A Photographic Album for Artists and Designers.
Principles of Pictorial Information Systems Design.
An Intelligent Image Database System.
Medical Image Retrieval by Spatial Features.

Multiresolution approximation and wavelet orthonormal bases of l 2 (r).
A theory for multiresolution signal decomposition: the wavelet representa- tion
Automatic Image Indexation and Retrieval.

Attentional Selection in Object Recognition.


IDB: An Image Database System.
Multirate Systems And
Retrieval Effectiveness.
Faces Using Mutiple Re- trievals
An Approach to Query-by-texture in Image Database Systems
A Fractal-Based Clustering Approach in Large Visual Database Systems
--TR

--CTR
Aidong Zhang , Wendy Chang , Gholamhosein Sheikholeslami , Tanveer F. Syeda-Mahmood, NetView: Integrating Large-Scale Distributed Visual Databases, IEEE MultiMedia, v.5 n.3, p.47-59, July 1998
Wendy Chang , Gholamhosein Sheikholeslami , Aidong Zhang , Tanveer F. Syeda-Mahmood, Efficient resource selection in distributed visual information systems, Proceedings of the fifth ACM international conference on Multimedia, p.203-213, November 09-13, 1997, Seattle, Washington, United States
Wendy Chang , Gholamhosein Sheikholeslami , Jia Wang , Aidong Zhang, Data Resource Selection in Distributed Visual Information Systems, IEEE Transactions on Knowledge and Data Engineering, v.10 n.6, p.926-946, November 1998
Maude Manouvrier , Marta Rukoz , Genevive Jomier, A generalized metric distance between hierarchically partitioned images, Proceedings of the 6th international workshop on Multimedia data mining: mining integrated media and complex data, p.33-41, August 21-21, 2005, Chicago, Illinois
Wasfi Al-Khatib , Y. Francis Day , Arif Ghafoor , P. Bruce Berra, Semantic Modeling and Knowledge Representation in Multimedia Databases, IEEE Transactions on Knowledge and Data Engineering, v.11 n.1, p.64-80, January 1999
Gholamhosein Sheikholeslami , Aidong Zhang , Ling Bian, A Multi-Resolution Content-Based Retrieval Approach for Geographic Images, Geoinformatica, v.3 n.2, p.109-139, June 1999
