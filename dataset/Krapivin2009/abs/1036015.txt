We present lower bounds on the amount of communication that matrix multiplication algorithms must perform on a distributed-memory parallel computer. We denote the number of processors by <i>P</i> and the dimension of square matrices by <i>n</i>. We show that the most widely used class of algorithms, the so-called two-dimensional (2D) algorithms, are optimal, in the sense that in any algorithm that only uses <i>O</i>(<i>n</i><sup>2</sup>/<i>P</i>) words of memory per processor, at least one processor must send or receive (<i>n</i><sup>2</sup>/<i>P</i><sup>1/2</sup>) words. We also show that algorithms from another class, the so-called three-dimensional (3D) algorithms, are also optimal. These algorithms use replication to reduce communication. We show that in any algorithm that uses <i>O</i>(<i>n</i><sup>2</sup>/<i>P</i><sup>2/3</sup>) words of memory per processor, at least one processor must send or receive (<i>n</i><sup>2</sup>/<i>P</i><sup>2/3</sup>) words. Furthermore, we show a continuous tradeoff between the size of local memories and the amount of communication that must be performed. The 2D and 3D bounds are essentially instantiations of this tradeoff. We also show that if the input is distributed across the local memories of multiple nodes without replication, then (<i>n</i><sup>2</sup>) words must cross any bisection cut of the machine. All our bounds apply only to conventional (<i>n</i><sup>3</sup>) algorithms. They do not apply to Strassen's algorithm or other <i>o</i>(<i>n</i><sup>3</sup>) algorithms. 