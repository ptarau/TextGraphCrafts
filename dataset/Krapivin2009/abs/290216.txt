A hash table is a representation of a set in a linear size data  structure that supports constant-time membership queries. We show how to construct a hash table for any given set of n keys in O(lg lg n) parallel time with high probability, using n processors on a weak version of a concurrent-read concurrent-write parallel random access machine (crcw pram). Our algorithm uses a novel approach of hashing by "oblivious execution"  based on probabilistic analysis. The algorithm is simple and has the following structure:      Partition the input set into buckets by a random polynomial of constant degree.     For t:= 1 to O(lg lg n) do                                  Allocate Mt memory blocks, each of size Kt.           Let each bucket select a block at random, and try to injectively map its keys into the block using a random linear function. Buckets that fail carry on to the next iteration.        The crux of the algorithm is a careful a priori selection of the parameters Mt and Kt. The algorithm uses only O(lg lg n) random words  and can be implemented in a work-efficient manner. 