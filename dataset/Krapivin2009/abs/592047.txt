Automated user-interface generation environments have been criticized for their failure to deliver rich and powerful interactive applications. To specify more powerful systems, designers require multiple specialized modeling notations. The model-composition problem is concerned with automatically synthesizing powerful, correct, and efficient user interfaces from multiple models specified in different notations. Solutions to the model-composition problem must balance the advantages of separating code generation into specialized code generators each able to take advantage of deep, model-specific knowledge against the correctness and efficiency obstacles that result from such separation. We present a correct and efficient solution that maximizes the advantage of separation by using run-time composition mechanisms. 