AbstractQuery processing is a crucial component of various application domains including information retrieval, database design and management, pattern recognition, robotics, and VLSI. Many of these applications involve data stored in a matrix satisfying a number of properties. One property that occurs time and again specifies that the rows and the columns of the matrix are independently sorted. It is customary to refer to such a matrix as sorted. An instance of the Batched Searching and Ranking problem, (BSR, for short) involves a sorted matrix A of items from a totally ordered universe, along with a collection Q of queries. Q is an arbitrary mix of the following query types: For a search query qj, one is interested in an item of A that is closest to qj; for a rank query qj one is interested in the number of items of A that are strictly smaller than qj. The BSR problem asks for solving all queries in Q. In this work, we consider the BSR problem in the following context: The matrix A is pretiled, one item per processor, onto an enhanced mesh of size $\sqrt n\times \sqrt n$; the m queries are stored, one per processor, in the first ${{m \over {\sqrt n}}}$ columns of the platform. Our main contribution is twofold. First, we show that any algorithm that solves the BSR problem must take at least $\Omega ({\rm max\{log}n,\sqrt m\})$ time in the worst case. Second, we show that this time lower bound is tight on meshes of size $\sqrt n\times \sqrt n$ enhanced with multiple broadcasting, by exhibiting an algorithm solving the BSR problem in $\Theta ({\rm max\{log}\!\!n,\sqrt m\})$ time on such a platform. 